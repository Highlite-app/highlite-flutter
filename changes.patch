diff --git a/lib/core/local_storage/highlite_candidate_storage_service.dart b/lib/core/local_storage/highlite_candidate_storage_service.dart
index 3e9fa9b..d70c01c 100644
--- a/lib/core/local_storage/highlite_candidate_storage_service.dart
+++ b/lib/core/local_storage/highlite_candidate_storage_service.dart
@@ -2,6 +2,7 @@ import 'dart:convert';
 import 'package:flutter/material.dart';
 import 'package:highlite_flutter_mvp/core/constants/injection_constant.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/logger.dart';
 import 'package:hive_flutter/hive_flutter.dart';
 
@@ -9,19 +10,30 @@ import '../services/injection_container.dart';
 
 const String candidateBox = "candidate";
 const String profilePhoto = "profilePhoto";
+const String companyBox = "COMPANY_BOX" ;
 
 final hiveStorage = sl.get<ICandidateOnBoardingStorage>(
     instanceName: InjectionConstant.CandidateOnBoardingStorage);
 
 abstract class ICandidateOnBoardingStorage {
   Future<CandidateOnBoarding?> getCandidateFromStorage();
+  Future<CompanyOnboarding?> getCompanyOnboarding() ;
   Future<void> setCandidateToStorage(CandidateOnBoarding candidate);
+  Future<void> setCompanyToStorage(CompanyOnboarding companyOnboarding) ;
   Future<void> removeCandidateFromStorage();
   Future<void> setProfileImage(String profileUrl);
   Future<String> getImageProfile();
 }
 
 class HighliteStorage implements ICandidateOnBoardingStorage {
+
+  @override
+  Future<void> setCandidateToStorage(CandidateOnBoarding candidate) async {
+    debugPrint("The data stored inside Hive Database  ::: ${candidate}");
+    final box = Hive.lazyBox<CandidateOnBoarding>(candidateBox);
+    await box.put(candidateBox, candidate);
+  }
+
   @override
   Future<CandidateOnBoarding?> getCandidateFromStorage() async {
     final box = Hive.lazyBox<CandidateOnBoarding>(candidateBox);
@@ -38,6 +50,8 @@ class HighliteStorage implements ICandidateOnBoardingStorage {
         "CandidateJson In Hive Database is Empty . Please use setCandidateToStorage()");
   }
 
+
+
   @override
   Future<String> getImageProfile() async {
     final box =  Hive.lazyBox<String>(profilePhoto);
@@ -61,12 +75,7 @@ class HighliteStorage implements ICandidateOnBoardingStorage {
     await box.clear();
   }
 
-  @override
-  Future<void> setCandidateToStorage(CandidateOnBoarding candidate) async {
-    debugPrint("The data stored inside Hive Database  ::: ${candidate}");
-    final box = Hive.lazyBox<CandidateOnBoarding>(candidateBox);
-    await box.put(candidateBox, candidate);
-  }
+
 
 
   @override
@@ -74,4 +83,28 @@ class HighliteStorage implements ICandidateOnBoardingStorage {
     final box = await Hive.openBox(profilePhoto);
     box.put(profilePhoto, profilePhoto);
   }
+
+  @override
+  Future<CompanyOnboarding?> getCompanyOnboarding() async {
+   final box = Hive.lazyBox<CompanyOnboarding>(companyBox) ;
+   final companyJson = await box.get(companyBox);
+   if(companyJson !=null){
+     try{
+       logger.logEvent(companyJson , tag: "LOCAL DATA: COMPANY ONBOARDING" , isJson: true) ;
+       return companyJson ;
+     }catch(e){
+       logger.logEvent("$companyJson is Null or Empty reason: $e") ;
+      return null ;
+     }
+   }
+   return null ;
+
+  }
+
+  @override
+  Future<void> setCompanyToStorage(CompanyOnboarding companyOnboarding) async{
+     final box  =  Hive.lazyBox<CompanyOnboarding>(companyBox) ;
+     await box.put(companyBox , companyOnboarding) ;
+    throw UnimplementedError();
+  }
 }
diff --git a/lib/core/local_storage/hive_initializer.dart b/lib/core/local_storage/hive_initializer.dart
index 2d4573c..44e5185 100644
--- a/lib/core/local_storage/hive_initializer.dart
+++ b/lib/core/local_storage/hive_initializer.dart
@@ -1,5 +1,6 @@
 
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
 import 'package:hive_flutter/hive_flutter.dart';
 
 import 'highlite_candidate_storage_service.dart';
@@ -10,5 +11,6 @@ class HiveInitializer {
     await Hive.initFlutter();
     Hive.registerAdapter(CandidateOnBoardingAdapter());
     await Hive.openLazyBox<CandidateOnBoarding>(candidateBox);
+    await Hive.openLazyBox<CompanyOnboarding>(companyBox);
   }
 }
diff --git a/lib/core/local_storage/types/company_onboarding_adapter.dart b/lib/core/local_storage/types/company_onboarding_adapter.dart
new file mode 100644
index 0000000..375d191
--- /dev/null
+++ b/lib/core/local_storage/types/company_onboarding_adapter.dart
@@ -0,0 +1,29 @@
+import 'dart:convert';
+
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:hive/hive.dart';
+
+class CompanyOnboardingAdapter extends TypeAdapter<CompanyOnboarding>{
+
+  @override
+  int get typeId =>0;
+
+  @override
+  CompanyOnboarding read(BinaryReader reader) {
+
+    final companyOnboarding = reader.readString() ;
+    final Map<String , dynamic> companyJson =  jsonDecode(companyOnboarding) ;
+    return CompanyOnboarding.fromJson(companyJson) ;
+  }
+
+
+
+  @override
+  void write(BinaryWriter writer, CompanyOnboarding obj) {
+    final companyString  = jsonEncode(obj.toJson()) ;
+    writer.writeString(companyString) ;
+
+  }
+
+
+}
\ No newline at end of file
diff --git a/lib/core/networking/onboarding_mapper.dart b/lib/core/networking/onboarding_mapper.dart
index 18dccda..92cfcd2 100644
--- a/lib/core/networking/onboarding_mapper.dart
+++ b/lib/core/networking/onboarding_mapper.dart
@@ -7,6 +7,7 @@ import 'package:highlite_flutter_mvp/data/models/apis/onboarding/bookmark/respon
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/candidate/candidate_onboarding.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/candidate/update_candidate_onboarding.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/update_company_onboarding.dart';
 
 import '../../data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed_response.dart';
 import '../../data/models/apis/dashboard/company/home/company_job_feed_item_response.dart';
@@ -39,7 +40,9 @@ void registerOnBoardingConstructors() {
     return CandidateVideoFeed.listFromJson(map as List<dynamic>);
   });
 
+  MapperFactory.registerConstructor<CompanyOnboarding>((map)=> CompanyOnboarding.fromJson(map)) ;
   MapperFactory.registerConstructor<UpdateCandidate>((map)=> UpdateCandidate.fromJson(map)) ;
+  MapperFactory.registerConstructor<UpdateCompanyOnboarding>((map)=> UpdateCompanyOnboarding.fromJson(map)) ;
 
   MapperFactory.registerConstructor<VerifyEmailOtpResponse>((map)=>VerifyEmailOtpResponse.fromJson(map) );
 
diff --git a/lib/core/networking/url_constants.dart b/lib/core/networking/url_constants.dart
index 1e8bc9a..a2b3a46 100644
--- a/lib/core/networking/url_constants.dart
+++ b/lib/core/networking/url_constants.dart
@@ -4,8 +4,8 @@ class UrlConstants{
 
   static const mockListUrl = "/ravitejaavv/mock/main/mobile.json";
   static const onBoardingCandidateDetails = "/Candidate/candidateDetails";
-    static const getOnBoardingCandidateDetails = "/Candidate/getCandidateDetails";
-    static const updateOnBoardingCandidateDetails = "/Candidate/updateCandidate";
+  static const getOnBoardingCandidateDetails = "/Candidate/getCandidateDetails";
+  static const updateOnBoardingCandidateDetails = "/Candidate/updateCandidate";
   static const fetchCompanyHomeFeed = "/HomeFeed/fetchCompanyHomeFeed";
   static const fetchCandidateHomeFeed = "/HomeFeed/fetchCandidateHomeFeed";
   static const about = "/Candidate/createAbout";
@@ -19,4 +19,11 @@ class UrlConstants{
   static const sendEmail = "/emailAuthentication/sendEmail";
   static const verifyEmail = "/emailAuthentication/verifyOtp";
   static const signUp = "/auth/signup";
+
+
+// ******************* Company Section *************************
+
+static const onBoardingCompanyDetails = "/Company/companyOnBoarding" ;
+static const getOnBoardingCompanyDetails = "/Company/getCompanyUserDetails";
+static const updateOnBoardingCompanyDetails = "/Company/updateCompanyUserDetails";
 }
\ No newline at end of file
diff --git a/lib/core/resources/l10n/translation_key.dart b/lib/core/resources/l10n/translation_key.dart
index ab5963b..4b50030 100644
--- a/lib/core/resources/l10n/translation_key.dart
+++ b/lib/core/resources/l10n/translation_key.dart
@@ -103,7 +103,7 @@ class TranslationKeys{
 
 
   //company Flow
-  static const companyName = "What is your company name?";
+  static const whatsYourCompanyName = "What is your company name?";
   static const onboardingCompanySize = "What is your company size?";
   static const onboardingCompanyBenefits = "What benefits does your company\noffer?";
   static const onboardingJobLocationJobs = "Remote, in-office or both?";
@@ -220,6 +220,14 @@ class TranslationKeys{
   static const bookmarkDeleteTitle = "Are you sure you want to delete these items?" ;
   static const bookmarkDeleteMessage = "Once you delete it, you wonâ€™t be able see them in your saved items" ;
 
+  //Company
+  static const editCompanyName = "Edit Company Name" ;
+  static const companyName = "Company Name" ;
+  static const editCompanySize = "Company Size" ;
+  static const editCompanyBenefits = "Edit Company Benefits" ;
+  static const companyBenefits = "Company Benefits" ;
+  static const yourWebsite = "Your Website" ;
+
 
   // Upload Section //
   static const  uploadText  = "What do you want to upload ?" ;
diff --git a/lib/core/services/firebase_service.dart b/lib/core/services/firebase_service.dart
index 0e04aa5..99c2ccc 100644
--- a/lib/core/services/firebase_service.dart
+++ b/lib/core/services/firebase_service.dart
@@ -8,7 +8,10 @@ import 'package:google_sign_in/google_sign_in.dart';
 import 'package:highlite_flutter_mvp/core/constants/user_types.dart';
 import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
 import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/candidate/candidate_steps.dart';
+import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/company/company_steps.dart';
 import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/default_steps/default_steps.dart';
+import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/general/general_flow.dart';
+import 'package:highlite_flutter_mvp/domain/repositories/auth/auth_repository.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/logger.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/username_generator.dart';
 
@@ -64,18 +67,23 @@ class FirebaseService {
       final UserCredential authResult = await _auth.signInWithCredential(credential);
 
       //Adding  User Details//
-      CandidateTags.firstName = authResult.user?.displayName?.split(" ").first  ?? "";
-      print("The firstname is:: ${CandidateTags.firstName}") ;
-      print("The firstname from firebase is:: ${authResult.user?.displayName?.split(" ").first}") ;
-      CandidateTags.lastName = authResult.user?.displayName?.split(" ").last  ?? "";
-      print("The firstname is:: ${CandidateTags.lastName}") ;
-      DefaultTags.email = authResult.user?.email ?? "" ;
-      DefaultTags.username   = UserNameGenerator().getUserName(CandidateTags.firstName,  CandidateTags.lastName);
+      print("The user type is ::${GeneralFlowTags.userType}");
+      if(GeneralFlowTags.userType == UserTypes.candidate){
+        CandidateTags.firstName = authResult.user?.displayName?.split(" ").first  ?? "";
+        CandidateTags.lastName = authResult.user?.displayName?.split(" ").last  ?? "";
+        DefaultTags.email = authResult.user?.email ?? "" ;
+        DefaultTags.username   = UserNameGenerator().getUserName(CandidateTags.firstName,  CandidateTags.lastName);
+      }else {
+        CompanyTags.email = authResult.user?.email ?? "" ;
+        CompanyTags.userName   = UserNameGenerator().getUserName(CompanyFlowTags.companyName,  CompanyTags.website);
+
+      }
+
       // Return the signed-in user
        FirebaseConstant.providerId =   authResult.additionalUserInfo?.providerId ?? '' ;
       return authResult.user?.email;
     } catch (e) {
-      print("Error signing in with Google: $e");
+      logger.logEvent("Error signing in with Google: $e" , tag: "FIREBASE ERROR");
       return null;
     }
   }
diff --git a/lib/core/services/injection_container.dart b/lib/core/services/injection_container.dart
index a16556a..54b2f1b 100644
--- a/lib/core/services/injection_container.dart
+++ b/lib/core/services/injection_container.dart
@@ -9,7 +9,6 @@ import 'package:highlite_flutter_mvp/core/services/navigation_service.dart';
 import 'package:highlite_flutter_mvp/data/datasources/local_datasource.dart';
 import 'package:highlite_flutter_mvp/data/datasources/remote_datasources.dart';
 import 'package:highlite_flutter_mvp/data/repositories/auth/auth_repository_impl.dart';
-import 'package:highlite_flutter_mvp/data/repositories/dashboard/candidate/home/candidate_following_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/dashboard/candidate/home/job_post_video_feed_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/dashboard/candidate/profile/candidate_profile_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/dashboard/candidate/profile/candidate_video_feed_repository_impl.dart';
@@ -17,12 +16,12 @@ import 'package:highlite_flutter_mvp/data/repositories/dashboard/common/bookmark
 import 'package:highlite_flutter_mvp/data/repositories/dashboard/common/feed_service/home_feed_state_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/dashboard/common/feed_service/video_feed_integrated__repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/dashboard/company/profile/company_job_post_video_feed_repository_impl.dart';
+import 'package:highlite_flutter_mvp/data/repositories/dashboard/company/profile/company_profile_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/integrated_uploader/http_uploader_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/integrated_uploader/integrated_uploader_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/onboarding/onboarding_repository_impl.dart';
 import 'package:highlite_flutter_mvp/data/repositories/persistent/persistent_repository_impl.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/auth/auth_repository.dart';
-import 'package:highlite_flutter_mvp/domain/repositories/dashboard/candidate/home/candidate_following_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/candidate/home/job_post_video_feed_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/candidate/profile/candidate_profile_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/candidate/profile/candidate_video_feed_repository.dart';
@@ -31,6 +30,7 @@ import 'package:highlite_flutter_mvp/domain/repositories/dashboard/common/bookma
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/common/feed_service/home_feed_state_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/common/feed_service/video_feed_integrated_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/common/video_player/video_player_queue_repository.dart';
+import 'package:highlite_flutter_mvp/domain/repositories/dashboard/company/profile/company_profile_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/integrated_uploader/http_uploader_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/integrated_uploader/integrated_uploader_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/onboarding/onboarding_repositoy.dart';
@@ -110,6 +110,11 @@ Future<void> init() async {
           localDataSource: sl(), remoteDataSources: sl(), networkInfo: sl()),
       instanceName: InjectionConstant.candidateProfileRepository);
 
+  // *********************** COMPANY PROFILE REPOSITORY***********************
+  sl.registerLazySingleton<CompanyProfileRepository>(
+          () => CompanyProfileRepositoryImpl(
+          localDataSource: sl(), remoteDataSources: sl(), networkInfo: sl()));
+
   //register Parameter of
   sl.registerLazySingleton<RemoteDataSources>(() => RemoteDataSourceImpl());
   sl.registerLazySingleton<LocalDataSource>(() => LocalDataSourceImpl());
@@ -175,4 +180,8 @@ Future<void> init() async {
 
 
 
+
+
+
+
 }
diff --git a/lib/data/datasources/remote_datasources.dart b/lib/data/datasources/remote_datasources.dart
index 6cdf943..2d9d3c1 100644
--- a/lib/data/datasources/remote_datasources.dart
+++ b/lib/data/datasources/remote_datasources.dart
@@ -13,6 +13,8 @@ import 'package:highlite_flutter_mvp/data/models/apis/login/signin_api.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/bookmark/response/bookmark_collection_item_response.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/candidate/candidate_onboarding.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/candidate/update_candidate_onboarding.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/update_company_onboarding.dart';
 import 'package:highlite_flutter_mvp/data/models/onboarding/login_with_email_otp_model.dart';
 import 'package:highlite_flutter_mvp/data/models/onboarding/question_model.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/logger.dart';
@@ -37,11 +39,11 @@ import '../models/apis/onboarding/bookmark/request/bookmark_model.dart';
 abstract class RemoteDataSources {
   Future<QuestionsModel> getOnboardingQuestions();
 
-  Future<EmailOtpResponse> sendEmailOtpForSignIn(String recipient) ;
+  Future<EmailOtpResponse> sendEmailOtpForSignIn(String recipient);
 
-  Future<VerifyEmailOtpResponse> verifyEmailOtp(VerifyEmailOtp  verifyEmailOtp) ;
+  Future<VerifyEmailOtpResponse> verifyEmailOtp(VerifyEmailOtp verifyEmailOtp);
 
-  Future<SignUpResponse> signup(CreateUser createUser) ;
+  Future<SignUpResponse> signup(CreateUser createUser);
 
   Future<LoginWithEmailOtpModel> getLoginWithEmailOtp(String email);
 
@@ -76,7 +78,16 @@ abstract class RemoteDataSources {
 
   Future<ApiResponse> createBookmark(BookmarkModel bookmarkModel);
 
-  Future<BookmarkCollectionItemResponse> fetchBookmark(NextTokenRequest? request , String userId);
+  Future<BookmarkCollectionItemResponse> fetchBookmark(
+      NextTokenRequest? request, String userId);
+
+  // ******************* Company Section *************************
+
+  Future<SigninResponse> signUpCompany(CompanyOnboarding companyOnboarding);
+
+  Future<CompanyOnboarding> getCompanyOnboarding(String companyId);
+
+  Future<CompanyOnboarding> updateCompanyOnboarding(String companyId , CompanyOnboarding companyOnboarding ) ;
 }
 
 class RemoteDataSourceImpl implements RemoteDataSources {
@@ -86,89 +97,102 @@ class RemoteDataSourceImpl implements RemoteDataSources {
     throw UnimplementedError();
   }
 
-
   @override
-  Future<SignUpResponse> signup(CreateUser createUser) async{
-
-    try{
-      final response  =  await apiService.postApiCall<SignUpResponse>(url: UrlConstants.signUp, body:  createUser.toJson()) ;
+  Future<SignUpResponse> signup(CreateUser createUser) async {
+    try {
+      final response = await apiService.postApiCall<SignUpResponse>(
+          url: UrlConstants.signUp, body: createUser.toJson());
 
-      if(response.isSuccess){
-        final responseData = response.responseData ;
-        if(responseData !=null){
+      if (response.isSuccess) {
+        final responseData = response.responseData;
+        if (responseData != null) {
           logger.logEvent(
               'The status is ${UrlConstants.signUp} is ${responseData.status}');
-          return responseData ;
-        }else {
-          logger.logEvent("The ${UrlConstants.signUp} ${response.responseData} is null or Empty") ;
-          throw ApiErrorModel( "The ${UrlConstants.signUp} ${response.responseData} is null or Empty", HttpStatus.noContent ) ;
+          return responseData;
+        } else {
+          logger.logEvent(
+              "The ${UrlConstants.signUp} ${response.responseData} is null or Empty");
+          throw ApiErrorModel(
+              "The ${UrlConstants.signUp} ${response.responseData} is null or Empty",
+              HttpStatus.noContent);
         }
-
-      }else {
-        logger.logEvent("The ${UrlConstants.signUp} response is not success check ${response.httpStatusCode}") ;
-        throw ApiErrorModel( "The ${UrlConstants.signUp} response is not success check ${response.httpStatusCode}", HttpStatus.conflict ) ;
+      } else {
+        logger.logEvent(
+            "The ${UrlConstants.signUp} response is not success check ${response.httpStatusCode}");
+        throw ApiErrorModel(
+            "The ${UrlConstants.signUp} response is not success check ${response.httpStatusCode}",
+            HttpStatus.conflict);
       }
-    }catch(e){
-      throw Exception("Something went wrong ${UrlConstants.signUp} :: $e") ;
-
+    } catch (e) {
+      throw Exception("Something went wrong ${UrlConstants.signUp} :: $e");
     }
   }
 
   @override
-  Future<EmailOtpResponse> sendEmailOtpForSignIn(String recipient) async{
-    try{
-      final response  =  await apiService.postApiCall<EmailOtpResponse>(url: UrlConstants.sendEmail, body: {
-        'recipient':recipient ,
+  Future<EmailOtpResponse> sendEmailOtpForSignIn(String recipient) async {
+    try {
+      final response = await apiService
+          .postApiCall<EmailOtpResponse>(url: UrlConstants.sendEmail, body: {
+        'recipient': recipient,
       });
 
-      if(response.isSuccess){
-        final responseData = response.responseData ;
-       if(responseData !=null){
-         logger.logEvent(
-             'The OTP is ${UrlConstants.sendEmail} is ${responseData.otp}');
-         return responseData ;
-       }else {
-         logger.logEvent("The ${UrlConstants.sendEmail} ${response.responseData} is null or Empty") ;
-         throw ApiErrorModel( "The ${UrlConstants.sendEmail} ${response.responseData} is null or Empty", HttpStatus.noContent ) ;
-       }
-
-      }else {
-        logger.logEvent("The ${UrlConstants.sendEmail} response is not success check ${response.httpStatusCode}") ;
-        throw ApiErrorModel( "The ${UrlConstants.sendEmail} response is not success check ${response.httpStatusCode}", HttpStatus.conflict ) ;
+      if (response.isSuccess) {
+        final responseData = response.responseData;
+        if (responseData != null) {
+          logger.logEvent(
+              'The OTP is ${UrlConstants.sendEmail} is ${responseData.otp}');
+          return responseData;
+        } else {
+          logger.logEvent(
+              "The ${UrlConstants.sendEmail} ${response.responseData} is null or Empty");
+          throw ApiErrorModel(
+              "The ${UrlConstants.sendEmail} ${response.responseData} is null or Empty",
+              HttpStatus.noContent);
+        }
+      } else {
+        logger.logEvent(
+            "The ${UrlConstants.sendEmail} response is not success check ${response.httpStatusCode}");
+        throw ApiErrorModel(
+            "The ${UrlConstants.sendEmail} response is not success check ${response.httpStatusCode}",
+            HttpStatus.conflict);
       }
-    }catch(e){
-      throw Exception("Something went wrong ${UrlConstants.sendEmail} :: $e") ; 
-
+    } catch (e) {
+      throw Exception("Something went wrong ${UrlConstants.sendEmail} :: $e");
     }
-
   }
 
-
   @override
-  Future<VerifyEmailOtpResponse> verifyEmailOtp(VerifyEmailOtp verifyEmailOtp)  async{
-    try{
-      final response  =  await apiService.postApiCall<VerifyEmailOtpResponse>(url: UrlConstants.verifyEmail, body: verifyEmailOtp.toJson());
+  Future<VerifyEmailOtpResponse> verifyEmailOtp(
+      VerifyEmailOtp verifyEmailOtp) async {
+    try {
+      final response = await apiService.postApiCall<VerifyEmailOtpResponse>(
+          url: UrlConstants.verifyEmail, body: verifyEmailOtp.toJson());
 
-      if(response.isSuccess){
-        final responseData = response.responseData ;
-        if(responseData !=null){
+      if (response.isSuccess) {
+        final responseData = response.responseData;
+        if (responseData != null) {
           logger.logEvent(
               'The  status is ${UrlConstants.verifyEmail} is ${responseData.status}');
-          return responseData ;
-        }else {
-          logger.logEvent("The ${UrlConstants.verifyEmail} ${response.responseData} is null or Empty") ;
-          throw ApiErrorModel( "The ${UrlConstants.verifyEmail} ${response.responseData} is null or Empty", HttpStatus.noContent ) ;
+          return responseData;
+        } else {
+          logger.logEvent(
+              "The ${UrlConstants.verifyEmail} ${response.responseData} is null or Empty");
+          throw ApiErrorModel(
+              "The ${UrlConstants.verifyEmail} ${response.responseData} is null or Empty",
+              HttpStatus.noContent);
         }
-
-      }else {
-        logger.logEvent("The ${UrlConstants.verifyEmail} response is not success check ${response.httpStatusCode}") ;
-        throw ApiErrorModel( "The ${UrlConstants.verifyEmail} response is not success check ${response.httpStatusCode}", HttpStatus.conflict ) ;
+      } else {
+        logger.logEvent(
+            "The ${UrlConstants.verifyEmail} response is not success check ${response.httpStatusCode}");
+        throw ApiErrorModel(
+            "The ${UrlConstants.verifyEmail} response is not success check ${response.httpStatusCode}",
+            HttpStatus.conflict);
       }
-    }catch(e){
-      throw Exception("Something went wrong ${UrlConstants.verifyEmail} :: $e") ;
-
+    } catch (e) {
+      throw Exception("Something went wrong ${UrlConstants.verifyEmail} :: $e");
     }
   }
+
   @override
   Future<QuestionsModel> getOnboardingQuestions() {
     // TODO: implement getOnboardingQuestions
@@ -465,35 +489,144 @@ class RemoteDataSourceImpl implements RemoteDataSources {
 
   @override
   Future<BookmarkCollectionItemResponse> fetchBookmark(
-      NextTokenRequest? request , String userId) async {
-
-
+      NextTokenRequest? request, String userId) async {
     try {
       final response = await apiService
           .getApiCall<BookmarkCollectionItemResponse>(
               url: "${UrlConstants.fetchBookmark}/$userId",
-          qParams: {'nextToken': request});
+              qParams: {'nextToken': request});
 
       logger.logEvent('response.isSuccess: ${response.isSuccess}');
 
       if (response.isSuccess) {
         final responseData = response.responseData;
 
-        if (responseData != null &&  responseData.items!.isNotEmpty )  {
-          logger.logEvent('The ${UrlConstants.fetchBookmark} is ${responseData.items}', isJson: true);
-          logger.logEvent('The ${UrlConstants.fetchBookmark} is ${responseData.items?.first.userId}', isJson: true);
+        if (responseData != null && responseData.items!.isNotEmpty) {
+          logger.logEvent(
+              'The ${UrlConstants.fetchBookmark} is ${responseData.items}',
+              isJson: true);
+          logger.logEvent(
+              'The ${UrlConstants.fetchBookmark} is ${responseData.items?.first.userId}',
+              isJson: true);
           return responseData;
         } else {
           logger.logEvent('No Items found in ${UrlConstants.fetchBookmark}');
-          return BookmarkCollectionItemResponse(items: [] , nextToken: request?.nextToken ?? '') ;
-
+          return BookmarkCollectionItemResponse(
+              items: [], nextToken: request?.nextToken ?? '');
         }
       } else {
-        throw ApiErrorModel("API call failed: ${UrlConstants.fetchBookmark}", HttpStatus.badRequest);
+        throw ApiErrorModel("API call failed: ${UrlConstants.fetchBookmark}",
+            HttpStatus.badRequest);
       }
     } catch (e) {
-      logger.logEvent('Something went wrong with ${UrlConstants.fetchBookmark}, Reason: $e',);
+      logger.logEvent(
+        'Something went wrong with ${UrlConstants.fetchBookmark}, Reason: $e',
+      );
       throw Exception('The exception in ${UrlConstants.fetchBookmark} API: $e');
     }
   }
+
+// ******************* Company Section *************************
+
+  @override
+  Future<SigninResponse> signUpCompany(
+      CompanyOnboarding companyOnboarding) async {
+    try {
+      final response = await apiService.postApiCall<SigninResponse>(
+          url: UrlConstants.onBoardingCompanyDetails,
+          body: companyOnboarding.toJson());
+      if (response.isSuccess) {
+        debugPrint(response.responseData?.data.id ?? '');
+        final responseData = response.responseData;
+        if (responseData != null) {
+          return responseData;
+        } else {
+          logger.logEvent(
+              "The ${UrlConstants.onBoardingCompanyDetails} ${response.responseData} is null or Empty");
+          throw ApiErrorModel(
+              "The ${UrlConstants.onBoardingCompanyDetails} ${response.responseData} is null or Empty",
+              HttpStatus.noContent);
+        }
+      } else {
+        logger.logEvent(
+            "The ${UrlConstants.onBoardingCompanyDetails} response is not success check ${response.httpStatusCode}");
+        throw ApiErrorModel(
+            "The ${UrlConstants.onBoardingCompanyDetails} response is not success check ${response.httpStatusCode}",
+            HttpStatus.conflict);
+      }
+    } catch (e) {
+      throw Exception(
+          "Something went wrong ${UrlConstants.onBoardingCompanyDetails} :: $e");
+    }
+  }
+
+  @override
+  Future<CompanyOnboarding> getCompanyOnboarding(String companyId) async {
+    try {
+      final response = await apiService.getApiCall<CompanyOnboarding>(
+          url: '${UrlConstants.getOnBoardingCompanyDetails}/$companyId');
+      if (response.isSuccess) {
+        debugPrint(response.responseData?.userName ?? '');
+        final responseData = response.responseData;
+        if (responseData != null) {
+          return responseData;
+        } else {
+          logger.logEvent(
+              "The ${UrlConstants.getOnBoardingCompanyDetails} ${response.responseData} is null or Empty");
+          throw ApiErrorModel(
+              "The ${UrlConstants.getOnBoardingCompanyDetails} ${response.responseData} is null or Empty",
+              HttpStatus.noContent);
+        }
+      } else {
+        logger.logEvent(
+            "The ${UrlConstants.onBoardingCompanyDetails} response is not success check ${response.httpStatusCode}");
+        throw ApiErrorModel(
+            "The ${UrlConstants.onBoardingCompanyDetails} response is not success check ${response.httpStatusCode}",
+            HttpStatus.conflict);
+      }
+    } catch (e) {
+      logger.logEvent(
+          'Something went wrong ${UrlConstants.onBoardingCompanyDetails} , Reason : $e');
+      throw ApiErrorModel(
+          "Something went wrong ${UrlConstants.onBoardingCompanyDetails}",
+          HttpStatus.httpVersionNotSupported);
+    }
+
+  }
+
+  @override
+  Future<CompanyOnboarding> updateCompanyOnboarding(String companyId, CompanyOnboarding companyOnboarding) async{
+    try {
+      final response = await apiService.putApiCall<UpdateCompanyOnboarding>(
+        url: '${UrlConstants.updateOnBoardingCompanyDetails}/$companyId',
+        body: companyOnboarding.toJson(),
+      );
+
+      if (response.isSuccess) {
+        final responseData = response.responseData?.company  ;
+
+        if (responseData != null) {
+          logger.logEvent(
+              'The ${UrlConstants.updateOnBoardingCompanyDetails} is ${responseData.companyName ?? ''}');
+          return responseData;
+        } else {
+          throw ApiErrorModel(
+            "Unexpected null response data from ${UrlConstants.updateOnBoardingCandidateDetails}",
+            HttpStatus.internalServerError,
+          );
+        }
+      } else {
+        throw ApiErrorModel(
+          "API call failed: ${UrlConstants.updateOnBoardingCandidateDetails}",
+          HttpStatus.badRequest,
+        );
+      }
+    } catch (e) {
+      logger.logEvent(
+        'Something went wrong with ${UrlConstants.updateOnBoardingCandidateDetails}, Reason: $e',
+      );
+      throw Exception(
+          'The exception in ${UrlConstants.updateOnBoardingCandidateDetails} API: $e');
+    }
+  }
 }
diff --git a/lib/data/models/apis/authentication/signup_response.dart b/lib/data/models/apis/authentication/signup_response.dart
index 7803cd4..679733d 100644
--- a/lib/data/models/apis/authentication/signup_response.dart
+++ b/lib/data/models/apis/authentication/signup_response.dart
@@ -9,10 +9,14 @@ class SignUpResponse {
     message = json['message'];
   }
 
+  static SignUpResponse getDefault() {
+    return SignUpResponse(status: false , message: "No data associated with it") ;
+}
+
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    data['status'] = this.status;
-    data['message'] = this.message;
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['status'] = status;
+    data['message'] = message;
     return data;
   }
 }
diff --git a/lib/data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed.dart b/lib/data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed.dart
index a552f4f..0347b75 100644
--- a/lib/data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed.dart
+++ b/lib/data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed.dart
@@ -27,7 +27,7 @@ class CandidateVideoFeed {
 
 
   static List<CandidateVideoFeed> listFromJson(List<dynamic> jsonList){
-  return   jsonList.map((e) => CandidateVideoFeed.fromJson(e)).toList() ;
+  return jsonList.map((e) => CandidateVideoFeed.fromJson(e)).toList() ;
   }
   factory CandidateVideoFeed.fromJson(Map<String, dynamic> json) {
     return CandidateVideoFeed(
diff --git a/lib/data/models/apis/onboarding/company/company_onboarding.dart b/lib/data/models/apis/onboarding/company/company_onboarding.dart
index 6374cf3..b924d75 100644
--- a/lib/data/models/apis/onboarding/company/company_onboarding.dart
+++ b/lib/data/models/apis/onboarding/company/company_onboarding.dart
@@ -1,3 +1,5 @@
+import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/company/company_flow_model.dart';
+import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/general/general_flow_model.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/iterable.dart';
 
 class CompanyOnboarding {
@@ -5,7 +7,8 @@ class CompanyOnboarding {
   final String companyName;
   final String industry;
   final String city;
-  final String country ;
+  final String country;
+
   final String website;
   final String companySize;
   final List<String> benefits;
@@ -31,18 +34,39 @@ class CompanyOnboarding {
 
   factory CompanyOnboarding.fromJson(Map<String, dynamic> json) {
     return CompanyOnboarding(
-        companyId: json['companyId'],
-        companyName: json['companyName'],
-        industry: json['industry'],
-        city: json['city'],
-        country: json['country'],
-        website: json['website'],
-        companySize: json['companySize'],
-        benefits: (json['benefits'] as List).isNullOrEmpty ? []:(json['benefits'] as List).map((e) => e as String).toList(),
-        about: json['about'],
-        email: json['email'],
-        userName: json['userName'],
-        companyLogo: json['companyLogo']);
+      companyId: json['companyId'] ?? '',
+      companyName: json['companyName'] ?? '',
+      industry: json['industry'] ?? '',
+      city: json['city'] ?? '',
+      country: json['country'] ?? '',
+      website: json['website'] ?? '',
+      companySize: json['companySize'] ?? '',
+      benefits: json['benefits'] == null
+          ? []
+          : List<String>.from(json['benefits'] as List),
+      about: json['about'] ?? '',
+      email: json['email'] ?? '',
+      userName: json['userName'] ?? '',
+      companyLogo: json['companyLogo'] ?? '',
+    );
+  }
+
+
+
+  static CompanyOnboarding fromOnboarding(GeneralFlowModel generalFlow, CompanyFlowModel companyFlow) {
+  return CompanyOnboarding(
+  companyId: '',
+  companyName: companyFlow.companyName,
+  industry: companyFlow.industry,
+  city: companyFlow.city,
+  country: companyFlow.country,
+  website: companyFlow.website,
+  companySize: companyFlow.companySize,
+  benefits: companyFlow.benefits,
+  about: companyFlow.about,
+  email: companyFlow.email,
+  userName: companyFlow.userName,
+  companyLogo: companyFlow.companyLogo) ;
   }
 
   static CompanyOnboarding defaultOnboarding() {
@@ -59,39 +83,53 @@ class CompanyOnboarding {
       email: 'unknown@example.com',
       userName: 'unknown_user',
       companyLogo:
-          'https://firebasestorage.googleapis.com/v0/b/highlite-app.appspot.com/o/profile_images%2F1722284841986?alt=media&token=eb375275-67a1-446b-af2b-7dee5ede5458',
+      'https://firebasestorage.googleapis.com/v0/b/highlite-app.appspot.com/o/profile_images%2F1722284841986?alt=media&token=eb375275-67a1-446b-af2b-7dee5ede5458',
     );
   }
 
+  static CompanyOnboarding getDefault() {
+    return CompanyOnboarding(companyId:'' ,
+        companyName: '', industry: "",
+        city: '',
+        country: '',
+        website: '' ,
+        companySize: '',
+        benefits: [],
+        about: '',
+        email: '',
+        userName: '',
+        companyLogo: '');
+  }
+
   Map<String, dynamic> toJson() {
     return {
       'companyId': companyId,
       'companyName': companyName,
       'industry': industry,
       'city': city,
-      'country':country ,
+      'country': country,
       'website': website,
       'companySize': companySize,
       'benefits': benefits,
       'about': about,
       'email': email,
       'userName': userName,
+      'companyLogo': companyLogo ,
     };
   }
 
-  CompanyOnboarding copyWith(
-      {String? companyId,
-      String? companyName,
-      String? industry,
-      String? city,
-        String? country ,
-      String? website,
-      String? companySize,
-      List<String>? benefits,
-      String? about,
-      String? email,
-      String? userName,
-      String? companyLogo}) {
+  CompanyOnboarding copyWith({String? companyId,
+    String? companyName,
+    String? industry,
+    String? city,
+    String? country,
+    String? website,
+    String? companySize,
+    List<String>? benefits,
+    String? about,
+    String? email,
+    String? userName,
+    String? companyLogo}) {
     return CompanyOnboarding(
       companyId: companyId ?? this.companyId,
       companyName: companyName ?? this.companyName,
diff --git a/lib/data/models/apis/onboarding/company/update_company_onboarding.dart b/lib/data/models/apis/onboarding/company/update_company_onboarding.dart
new file mode 100644
index 0000000..483751d
--- /dev/null
+++ b/lib/data/models/apis/onboarding/company/update_company_onboarding.dart
@@ -0,0 +1,25 @@
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+
+class UpdateCompanyOnboarding {
+  String? message;
+  CompanyOnboarding? company;
+
+  UpdateCompanyOnboarding({this.message, this.company});
+
+  UpdateCompanyOnboarding.fromJson(Map<String, dynamic> json) {
+    message = json['message'];
+    company =
+        json['company'] != null ? CompanyOnboarding.fromJson(json['company']) : null;
+  }
+
+  Map<String, dynamic> toJson() {
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['message'] = message;
+    if (company != null) {
+      data['company'] = company!.toJson();
+    }
+    return data;
+  }
+}
+
+
diff --git a/lib/data/models/onboardingChat/flows/api_flows/company_signup.dart b/lib/data/models/onboardingChat/flows/api_flows/company_signup.dart
index 58d0d1e..f741268 100644
--- a/lib/data/models/onboardingChat/flows/api_flows/company_signup.dart
+++ b/lib/data/models/onboardingChat/flows/api_flows/company_signup.dart
@@ -40,7 +40,7 @@ class CompanySignupFlow extends APIFlow {
     );
     if (data.id != null && data.userType != null) {
       // ignore: use_build_context_synchronously
-      authentication.add(AuthenticateOnboardingEvent(
+       authentication.add(AuthenticateOnboardingEvent(
         data.id!,
         data.userType!,
       ));
diff --git a/lib/data/models/onboardingChat/flows/company/company_flow.dart b/lib/data/models/onboardingChat/flows/company/company_flow.dart
index aee2502..2d1b22a 100644
--- a/lib/data/models/onboardingChat/flows/company/company_flow.dart
+++ b/lib/data/models/onboardingChat/flows/company/company_flow.dart
@@ -1,11 +1,10 @@
 import 'package:get/get.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/api_flows/company_signup.dart';
 
-import '../../../../../app.dart';
 import '../../../../../core/routes/route_constants.dart';
-import '../../../../../presentation/pages/dashboard/company_dashboard.dart';
 import '../../../../../presentation/widgets/onboarding/onboarding_success.dart';
 import '../general/general_flow_model.dart';
-import '../job_post/job_post_flow.dart';
 import '../onboarding_chat_models.dart';
 import 'company_flow_model.dart';
 import 'company_steps.dart';
@@ -13,16 +12,18 @@ import 'company_steps.dart';
 class CompanyFlow extends OnboardingChatFlow<CompanyFlowModel> {
   @override
   List<OnboardingChatFlowItem> get steps => [
-    CompanySteps.companyNameStep,
-    CompanySteps.jobIndustry ,
-    CompanySteps.location ,
-    CompanySteps.companyWebsite ,
-    CompanySteps.companyBenefitStep,
-    CompanySteps.about,
-    CompanySteps.emailAddress ,
-  ];
+        CompanySteps.companyNameStep,
+        CompanySteps.jobIndustry,
+        CompanySteps.location,
+        CompanySteps.companySizeStep,
+        CompanySteps.companyWebsite,
+        CompanySteps.companyBenefitStep,
+        CompanySteps.about,
+        CompanySteps.emailAddress,
+      ];
 
   final GeneralFlowModel generalModel;
+
   CompanyFlow({
     required super.initialStep,
     required this.generalModel,
@@ -30,19 +31,18 @@ class CompanyFlow extends OnboardingChatFlow<CompanyFlowModel> {
 
   @override
   FlowStepResponse Function() get conclusion => () {
+        final companyFlowModel = getGeneratedModel();
         return FlowStepResponse(
           indicator: FlowResponseTags.completeFlow,
-          // flowAttached: JobPostFlow(
-          //   initialStep: 0,
-          //   generalModel: generalModel,
-          //   companyModel: getGeneratedModel(),
-          // ),
-            completionFlow:    showOnboardingSuccess(
-             "Srijan",
-                  () async{
-                await  Get.toNamed(RouteConstants.companyDashboard);
-              },
-            ),
+          apiFlow: CompanySignupFlow(
+              companyOnboarding: CompanyOnboarding.fromOnboarding(
+                  generalModel, companyFlowModel)),
+          completionFlow: showOnboardingSuccess(
+            companyFlowModel.companyName,
+            () async {
+              await Get.toNamed(RouteConstants.companyDashboard);
+            },
+          ),
         );
       };
 
diff --git a/lib/data/models/onboardingChat/flows/company/company_flow_model.dart b/lib/data/models/onboardingChat/flows/company/company_flow_model.dart
index b81c129..15f0af0 100644
--- a/lib/data/models/onboardingChat/flows/company/company_flow_model.dart
+++ b/lib/data/models/onboardingChat/flows/company/company_flow_model.dart
@@ -1,32 +1,66 @@
-import 'package:json_annotation/json_annotation.dart';
+import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/company/company_steps.dart';
 
-part 'company_flow_model.g.dart';
-
-@JsonSerializable()
 class CompanyFlowModel {
-  final String organization;
-  final String jobIndustry;
-  final String companyWebsite;
+  final String companyName;
+  final String industry;
   final String city;
   final String country;
-  final String jobTitle;
+  final String website;
+  final String companySize;
+  final List<String> benefits;
   final String about;
-  final String username;
-  final String createdAt;
-  final String updatedAt;
-  const CompanyFlowModel({
+  final String email;
+  final String userName;
+  final String companyLogo;
+
+  CompanyFlowModel({
+    required this.companyName,
+    required this.industry,
     required this.city,
     required this.country,
-    required this.jobTitle,
-    required this.companyWebsite,
-    required this.organization,
+    required this.website,
+    required this.companySize,
+    required this.benefits,
     required this.about,
-    required this.username,
-    required this.jobIndustry,
-    required this.createdAt,
-    required this.updatedAt,
+    required this.email,
+    required this.userName,
+    required this.companyLogo,
   });
-  factory CompanyFlowModel.fromJson(Map<String, dynamic> json) =>
-      _$CompanyFlowModelFromJson(json);
-  Map<String, dynamic> toJson() => _$CompanyFlowModelToJson(this);
+
+  // fromJson method to deserialize JSON data into CompanyFlowModel
+  factory CompanyFlowModel.fromJson(Map<String, dynamic> json) {
+
+    final benefits =  json['benefits'] as  List<dynamic>?   ??  [] ;
+
+    return CompanyFlowModel(
+      companyName: json['companyName'] ?? '',
+      industry: json['industry'] ?? '',
+      city: json['city'] ?? '',
+      country: json['country'] ?? '',
+      website: json['website'] ?? '',
+      companySize: json['companySize'] ?? '',
+      benefits: benefits.isNotEmpty ? benefits.map((benefit) => benefit as String).toList() : [] ,
+      about: json['about'] ?? '',
+      email: CompanyTags.email,
+      userName: CompanyTags.userName,
+      companyLogo: json['companyLogo'] ?? '',
+    );
+  }
+
+  // toJson method to serialize CompanyFlowModel to JSON data
+  Map<String, dynamic> toJson() {
+    return {
+      'companyName': companyName,
+      'industry': industry,
+      'city': city,
+      'country': country,
+      'website': website,
+      'companySize': companySize,
+      'benefits': benefits,
+      'about': about,
+      'email': email,
+      'userName': userName,
+      'companyLogo': companyLogo,
+    };
+  }
 }
diff --git a/lib/data/models/onboardingChat/flows/company/company_flow_model.g.dart b/lib/data/models/onboardingChat/flows/company/company_flow_model.g.dart
deleted file mode 100644
index 3bdb0ff..0000000
--- a/lib/data/models/onboardingChat/flows/company/company_flow_model.g.dart
+++ /dev/null
@@ -1,35 +0,0 @@
-// GENERATED CODE - DO NOT MODIFY BY HAND
-
-part of 'company_flow_model.dart';
-
-// **************************************************************************
-// JsonSerializableGenerator
-// **************************************************************************
-
-CompanyFlowModel _$CompanyFlowModelFromJson(Map<String, dynamic> json) =>
-    CompanyFlowModel(
-      city: json['city'] as String,
-      country: json['country'] as String,
-      jobTitle: json['jobTitle'] as String,
-      companyWebsite: json['companyWebsite'] as String,
-      organization: json['organization'] as String,
-      about: json['about'] as String,
-      username: json['username'] as String,
-      jobIndustry: json['jobIndustry'] as String,
-      createdAt: json['createdAt'] as String,
-      updatedAt: json['updatedAt'] as String,
-    );
-
-Map<String, dynamic> _$CompanyFlowModelToJson(CompanyFlowModel instance) =>
-    <String, dynamic>{
-      'organization': instance.organization,
-      'jobIndustry': instance.jobIndustry,
-      'companyWebsite': instance.companyWebsite,
-      'city': instance.city,
-      'country': instance.country,
-      'jobTitle': instance.jobTitle,
-      'about': instance.about,
-      'username': instance.username,
-      'createdAt': instance.createdAt,
-      'updatedAt': instance.updatedAt,
-    };
diff --git a/lib/data/models/onboardingChat/flows/company/company_steps.dart b/lib/data/models/onboardingChat/flows/company/company_steps.dart
index 017419c..0af5f39 100644
--- a/lib/data/models/onboardingChat/flows/company/company_steps.dart
+++ b/lib/data/models/onboardingChat/flows/company/company_steps.dart
@@ -40,23 +40,14 @@ class CompanyFlowTags {
 }
 
 class CompanySteps {
-  // static OnboardingChatFlowItem username = UsernameStep(false);
-  // static OnboardingChatFlowItem location = LocationStep();
-  // static OnboardingChatFlowItem title = JobPositionTitleStep();
- // static OnboardingChatFlowItem organization = OrganizationStep();
 
-
-//  static OnboardingChatFlowItem companyEmployees = CompanyEmployeesStep();
   static OnboardingChatFlowItem companyNameStep = CompanyNameStep();
   static OnboardingChatFlowItem jobIndustry = CompanyIndustryStep();
+  static OnboardingChatFlowItem location = LocationStep(false);
   static OnboardingChatFlowItem companySizeStep = CompanySizeStep();
   static OnboardingChatFlowItem companyBenefitStep = CompanyBenefitsStep();
- // static OnboardingChatFlowItem jobFlexibility = JobFlexibilityStep(isCandidate: false);
-//  static OnboardingChatFlowItem jobType = JobDurationStep();
-  //static OnboardingChatFlowItem hourlyRate = HourlyRateStep(isCandidate: false);
-  static OnboardingChatFlowItem location = LocationStep(false);
   static OnboardingChatFlowItem companyWebsite = CompanyWebsiteStep();
   static OnboardingChatFlowItem emailAddress = EmailAddressStep();
   static OnboardingChatFlowItem about = AboutStep(false);
-  // static OnboardingChatFlowItem companyLogo = ProfileStep(true);
+
 }
diff --git a/lib/data/models/onboardingChat/flows/company/steps/company_name_step.dart b/lib/data/models/onboardingChat/flows/company/steps/company_name_step.dart
index b83f8ce..753229d 100644
--- a/lib/data/models/onboardingChat/flows/company/steps/company_name_step.dart
+++ b/lib/data/models/onboardingChat/flows/company/steps/company_name_step.dart
@@ -15,12 +15,12 @@ class CompanyNameStep extends OnboardingChatFlowItem{
   messages:(payload) =>[
     ChatMessage(
         tag: CompanyTags.companyName ,
-        message:   TranslationKeys.companyName ,
+        message:   TranslationKeys.whatsYourCompanyName ,
         chatId: OnboardingChatter.bot),
   ],
   respondent:(focusNode)=> DefaultChatResponders.name(focusNode),
   modifier: (payload, tag , messages) async{
-    payload[tag]= messages;
+    payload[tag]= messages.first;
     return Future.value(FlowResponse.successResponse);
   },
     postModifyStep: OnboardingStepDefaults.createPostModifyStepAsWhole(
diff --git a/lib/data/models/onboardingChat/flows/company/steps/company_size_step.dart b/lib/data/models/onboardingChat/flows/company/steps/company_size_step.dart
index ecd0900..9e6df8a 100644
--- a/lib/data/models/onboardingChat/flows/company/steps/company_size_step.dart
+++ b/lib/data/models/onboardingChat/flows/company/steps/company_size_step.dart
@@ -54,7 +54,7 @@ class CompanySizeStep extends OnboardingChatFlowItem {
             ),
           ),
           modifier: (payload, tag, messages) async {
-            payload[tag] = messages;
+            payload[tag] = messages.first;
             return Future.value(FlowResponse.successResponse);
           },
           postModifyStep: OnboardingStepDefaults.createPostModifyStepAsWhole(
diff --git a/lib/data/models/onboardingChat/flows/company/steps/job_industry_step.dart b/lib/data/models/onboardingChat/flows/company/steps/job_industry_step.dart
index b84b40a..55f4fb4 100644
--- a/lib/data/models/onboardingChat/flows/company/steps/job_industry_step.dart
+++ b/lib/data/models/onboardingChat/flows/company/steps/job_industry_step.dart
@@ -58,7 +58,7 @@ class CompanyIndustryStep extends OnboardingChatFlowItem {
            ChatRespondent(
              checkBoxHintText: "Search industries",
           checkbox: sort(IndustryType.values.toList().map((skill) => skill.title).toList()) ,
-          checkboxSelection: MinMax(1, 3),
+          checkboxSelection: MinMax(1, 1),
       ),
     ),
           modifier: (payload, tag, messages) async {
diff --git a/lib/data/models/onboardingChat/flows/default_steps/email_address_step.dart b/lib/data/models/onboardingChat/flows/default_steps/email_address_step.dart
index 5ddb9c8..2dd9191 100644
--- a/lib/data/models/onboardingChat/flows/default_steps/email_address_step.dart
+++ b/lib/data/models/onboardingChat/flows/default_steps/email_address_step.dart
@@ -7,6 +7,7 @@ import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
 import 'package:highlite_flutter_mvp/core/resources/preference_constants.dart';
 import 'package:highlite_flutter_mvp/core/services/firebase_service.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/authentication/create_user.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/authentication/signup_response.dart';
 import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/candidate/candidate_steps.dart';
 import 'package:highlite_flutter_mvp/data/models/onboardingChat/flows/login/login_flow/login_flow.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/onboarding/onboarding_repositoy.dart';
@@ -15,6 +16,7 @@ import '../../../../../core/constants/default_responders.dart';
 import '../../../../../presentation/widgets/chat/chat_bubble.dart';
 import '../../../../../presentation/widgets/chat/chat_responder.dart';
 import '../../../defaults/onboarding_step_defaults.dart';
+import '../company/company_steps.dart';
 import '../general/general_flow.dart';
 import '../onboarding_chat_models.dart';
 import 'default_steps.dart';
@@ -108,13 +110,26 @@ class EmailAddressStep extends OnboardingChatFlowItem {
             if(messages.first == TranslationKeys.signUpGoogle){
               ProviderEnum.google ;
             }
-          final signUpResponse  =   await onboardingService.signUp(CreateUser(
-              firstName: CandidateTags.firstName ,
-              email: DefaultTags.email ,
-              provider: "google",
-             providerId: FirebaseConstant.providerId ,
-            userType: UserTypes.candidate
-            )) ;
+
+             SignUpResponse signUpResponse = SignUpResponse.getDefault();
+            if(GeneralFlowTags.userType == UserTypes.candidate){
+               signUpResponse  =   await onboardingService.signUp(CreateUser(
+                  firstName: CandidateTags.firstName ,
+                  email: DefaultTags.email ,
+                  provider: "google",
+                  providerId: FirebaseConstant.providerId ,
+                  userType: UserTypes.candidate
+              )) ;
+            }else {
+               signUpResponse  =  await onboardingService.signUp(CreateUser(
+                  firstName: CompanyTags.companyName ,
+                  email: CompanyTags.email ,
+                  provider: "google",
+                  providerId: FirebaseConstant.providerId ,
+                  userType: UserTypes.company
+              )) ;
+            }
+
             if (emailAddressFromSocial != null && signUpResponse.status == true ) {
               payload[DefaultTags.email] = emailAddressFromSocial;
 
diff --git a/lib/data/models/onboardingChat/flows/general/general_flow.dart b/lib/data/models/onboardingChat/flows/general/general_flow.dart
index 4683f54..4520eb9 100644
--- a/lib/data/models/onboardingChat/flows/general/general_flow.dart
+++ b/lib/data/models/onboardingChat/flows/general/general_flow.dart
@@ -36,6 +36,7 @@ class GeneralFlow extends OnboardingChatFlow<GeneralFlowModel> {
         debugPrint("********|| CANDIDATE || *********");
         debugPrint("The User-Type is :::${flowModel.userType}");
         if (flowModel.userType == UserTypes.candidate) {
+          GeneralFlowTags.userType = UserTypes.candidate ;
           return FlowStepResponse(
             indicator: FlowResponseTags.nextFlow,
             flowAttached: CandidateFlow(
@@ -44,6 +45,7 @@ class GeneralFlow extends OnboardingChatFlow<GeneralFlowModel> {
             ),
           );
         } else {
+          GeneralFlowTags.userType = UserTypes.company ;
           debugPrint("********|| COMPANY || *********");
           debugPrint("The User-Type is :::${flowModel.userType}");
           return FlowStepResponse(
diff --git a/lib/data/repositories/auth/auth_repository_impl.dart b/lib/data/repositories/auth/auth_repository_impl.dart
index 02e8af5..bc487ae 100644
--- a/lib/data/repositories/auth/auth_repository_impl.dart
+++ b/lib/data/repositories/auth/auth_repository_impl.dart
@@ -9,6 +9,7 @@ import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company
 import 'package:highlite_flutter_mvp/data/repositories/persistent/persistent_repository_impl.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/candidate/profile/candidate_profile_repository.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/dashboard/common/feed_service/home_feed_state_repository.dart';
+import 'package:highlite_flutter_mvp/domain/repositories/dashboard/company/profile/company_profile_repository.dart';
 import '../../../domain/repositories/auth/auth_repository.dart';
 import '../../../domain/repositories/persistent/persistent_repository.dart';
 import '../../../presentation/widgets/utils/logger.dart';
@@ -54,6 +55,10 @@ class AuthRepositoryImpl implements AuthRepository {
 
   Future<void> _setByIdAndUserType(String id, String userType) async {
     if (userType == UserTypes.company) {
+      debugPrint("The user type is in AuthRepositoryImpl  $userType");
+      final companyDetails  = await companyProfileService.getCompanyOnboarding(id) ;
+      companyOnboarding =  companyDetails ;
+
       //TODO : REQUIRED WHILE WORKING ON COMPANY PROFILE
     } else {
       debugPrint("The user type is in AuthRepositoryImpl  $userType");
diff --git a/lib/data/repositories/dashboard/company/profile/company_profile_repository_impl.dart b/lib/data/repositories/dashboard/company/profile/company_profile_repository_impl.dart
new file mode 100644
index 0000000..a386212
--- /dev/null
+++ b/lib/data/repositories/dashboard/company/profile/company_profile_repository_impl.dart
@@ -0,0 +1,46 @@
+import 'package:highlite_flutter_mvp/core/platform/network_info.dart';
+import 'package:highlite_flutter_mvp/data/datasources/local_datasource.dart';
+import 'package:highlite_flutter_mvp/data/datasources/remote_datasources.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:injectable/injectable.dart';
+import '../../../../../domain/repositories/dashboard/company/profile/company_profile_repository.dart';
+
+@Injectable(as: CompanyProfileRepository)
+class CompanyProfileRepositoryImpl implements CompanyProfileRepository {
+  final RemoteDataSources remoteDataSources;
+
+  final LocalDataSource localDataSource;
+
+  final NetworkInfo networkInfo;
+
+  CompanyProfileRepositoryImpl({
+    required this.remoteDataSources,
+    required this.localDataSource,
+    required this.networkInfo,
+  });
+
+  @override
+  Future<CompanyOnboarding> getCompanyOnboarding(String companyId) async {
+    if (await networkInfo.isConnected()) {
+      final companyOnboarding =
+          await remoteDataSources.getCompanyOnboarding(companyId);
+      //await hiveStorage.setCompanyToStorage(companyOnboarding);
+      return companyOnboarding;
+    } else {
+      throw Exception("Internet is Not Connected");
+    }
+  }
+
+  @override
+  Future<CompanyOnboarding> updateCompanyOnboarding(
+      CompanyOnboarding request, String companyId) async {
+    if (await networkInfo.isConnected()) {
+      final companyOnboarding =
+          await remoteDataSources.updateCompanyOnboarding(companyId, request);
+      //await hiveStorage.setCompanyToStorage(companyOnboarding);
+      return companyOnboarding;
+    } else {
+      throw Exception("Internet is Not Connected");
+    }
+  }
+}
diff --git a/lib/data/repositories/onboarding/onboarding_repository_impl.dart b/lib/data/repositories/onboarding/onboarding_repository_impl.dart
index b8a64dc..7e709d7 100644
--- a/lib/data/repositories/onboarding/onboarding_repository_impl.dart
+++ b/lib/data/repositories/onboarding/onboarding_repository_impl.dart
@@ -32,11 +32,9 @@ class OnBoardingRepositoryImpl extends OnBoardingRepository {
       required this.networkInfo});
 
   @override
-  Future<EmailOtpResponse> getLoginWithEmailOtp(
-      String recipient) async {
+  Future<EmailOtpResponse> getLoginWithEmailOtp(String recipient) async {
     if (await networkInfo.isConnected()) {
       return await remoteDataSources.sendEmailOtpForSignIn(recipient);
-
     } else {
       throw Exception("No Internet Connection");
     }
@@ -67,10 +65,8 @@ class OnBoardingRepositoryImpl extends OnBoardingRepository {
 
   @override
   Future<SigninResponse> signUpCandidate(CandidateOnBoarding candidate) async {
-
     if (await networkInfo.isConnected()) {
-        return  await remoteDataSources.signUpCandidate(candidate);
-
+      return await remoteDataSources.signUpCandidate(candidate);
     } else {
       throw Exception("No Internet Connection");
     }
@@ -78,39 +74,42 @@ class OnBoardingRepositoryImpl extends OnBoardingRepository {
 
   @override
   Future<SigninResponse> signUpCompanyUser(
-      CompanyOnboarding companyOnboarding) {
-    // TODO: implement signUpCompanyUser
-    throw UnimplementedError();
+      CompanyOnboarding companyOnboarding) async {
+    if (await networkInfo.isConnected()) {
+      return await remoteDataSources.signUpCompany(companyOnboarding);
+    } else {
+      throw Exception("No Internet Connection");
+    }
   }
 
   @override
-  Future< VerifyEmailOtpResponse> verifyEmailOtp(VerifyEmailOtp verifyEmailOtp) async{
+  Future<VerifyEmailOtpResponse> verifyEmailOtp(
+      VerifyEmailOtp verifyEmailOtp) async {
     final VerifyEmailOtpResponse verifyEmailOtpResponse;
     if (await networkInfo.isConnected()) {
-    try {
-      verifyEmailOtpResponse =
-    await remoteDataSources.verifyEmailOtp(verifyEmailOtp);
-    return verifyEmailOtpResponse;
-    } catch(e) {
-    throw Exception();
-    }
+      try {
+        verifyEmailOtpResponse =
+            await remoteDataSources.verifyEmailOtp(verifyEmailOtp);
+        return verifyEmailOtpResponse;
+      } catch (e) {
+        throw Exception();
+      }
     } else {
-    throw Exception("No Internet Connection");
+      throw Exception("No Internet Connection");
     }
   }
 
   @override
   Future<SignUpResponse> signUp(CreateUser creteUser) async {
     if (await networkInfo.isConnected()) {
-    try {
-   final  signUpResponse  =
-    await remoteDataSources.signup(creteUser);
-    return signUpResponse;
-    } catch(e) {
-    throw Exception();
-    }
+      try {
+        final signUpResponse = await remoteDataSources.signup(creteUser);
+        return signUpResponse;
+      } catch (e) {
+        throw Exception();
+      }
     } else {
-    throw Exception("No Internet Connection");
+      throw Exception("No Internet Connection");
     }
   }
 }
diff --git a/lib/domain/repositories/dashboard/company/profile/company_profile_repository.dart b/lib/domain/repositories/dashboard/company/profile/company_profile_repository.dart
new file mode 100644
index 0000000..197e151
--- /dev/null
+++ b/lib/domain/repositories/dashboard/company/profile/company_profile_repository.dart
@@ -0,0 +1,14 @@
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+
+import '../../../../../core/services/injection_container.dart';
+
+
+ final companyProfileService = sl.get<CompanyProfileRepository>() ;
+
+abstract class  CompanyProfileRepository {
+
+  Future<CompanyOnboarding> getCompanyOnboarding(String companyId) ;
+  Future<CompanyOnboarding> updateCompanyOnboarding(CompanyOnboarding request , String companyId) ;
+
+
+}
\ No newline at end of file
diff --git a/lib/domain/repositories/dashboard/company/upload/upload_company_repository.dart b/lib/domain/repositories/dashboard/company/upload/upload_company_repository.dart
new file mode 100644
index 0000000..3823f1d
--- /dev/null
+++ b/lib/domain/repositories/dashboard/company/upload/upload_company_repository.dart
@@ -0,0 +1 @@
+abstract class UploadCompanyRepository{}
\ No newline at end of file
diff --git a/lib/domain/repositories/dashboard/company/video_player/video_player_queue_repository.dart b/lib/domain/repositories/dashboard/company/video_player/video_player_queue_repository.dart
deleted file mode 100644
index c334e2a..0000000
--- a/lib/domain/repositories/dashboard/company/video_player/video_player_queue_repository.dart
+++ /dev/null
@@ -1,14 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'package:video_player/video_player.dart';
-
-abstract class VideoPLayerQueueRepository {
-  late Map<String , ImageProvider> thumbnails ;
-  late Map<String, VideoPlayerController>  controllers  ;
-  late VideoPlayerController? currentRunningVideo ;
-  Future<void> reset() ;
-  Future<void> enqueue(String playbackId) ;
-  VideoPlayerController? getControllerBy(String playbackId) ;
-  ImageProvider? getThumbnailBy(String playbackId) ;
-  Future<void> play(VideoPlayerController controller);
-
-}
\ No newline at end of file
diff --git a/lib/home.dart b/lib/home.dart
index 8735ac8..e24ab9e 100644
--- a/lib/home.dart
+++ b/lib/home.dart
@@ -1,5 +1,7 @@
 
 import 'package:flutter/material.dart';
+import 'package:highlite_flutter_mvp/core/resources/asset_constants.dart';
+import 'package:highlite_flutter_mvp/core/resources/color_constants.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_event.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/initial.dart';
@@ -23,6 +25,13 @@ class _HomeState extends State<Home> {
   @override
   Widget build(BuildContext context) {
     authentication.add(const AuthenticateOnStartEvent());
-    return const Placeholder();
+    return Container(
+      color: ColorConstant.primary500,
+      child: Center(child: SizedBox(
+          width: 100,
+          height: 100,
+          child: Image.asset(AssetConstant.icHighLiteLogo)),),
+    );
   }
 }
+
diff --git a/lib/presentation/bloc/dashboard/auth/authentication_bloc.dart b/lib/presentation/bloc/dashboard/auth/authentication_bloc.dart
index cdacd08..18b7707 100644
--- a/lib/presentation/bloc/dashboard/auth/authentication_bloc.dart
+++ b/lib/presentation/bloc/dashboard/auth/authentication_bloc.dart
@@ -12,19 +12,29 @@ import '../../../../data/repositories/auth/auth_repository_impl.dart';
 import 'authentication_event.dart';
 import 'authentication_state.dart';
 
-final authentication = sl.get<AuthenticationBloc>(instanceName: InjectionConstant.authenticationBloc) ;
-
-
-class AuthenticationBloc  extends Bloc<AuthenticationEvent, AuthenticationState> {
-  AuthenticationBloc(
-      ) : super(AuthenticationState()) {
+final authentication = sl.get<AuthenticationBloc>(
+    instanceName: InjectionConstant.authenticationBloc);
 
+class AuthenticationBloc
+    extends Bloc<AuthenticationEvent, AuthenticationState> {
+  AuthenticationBloc() : super(AuthenticationState()) {
     on<AuthenticateOnStartEvent>(_handleAuthenticateOnStart);
     on<AuthenticateOnboardingEvent>(_handleAuthenticateOnboarding);
     on<AttachAuthenticationEvent>(_handleAttach);
     on<AuthenticateCompanyEvent>(_handleAuthenticateCompany);
     on<AuthenticateCandidateEvent>(_handleAuthenticateCandidate);
-    on<LogoutEvent>((event, emit) async {
+    on<LogoutEvent>(
+      (event, emit) async {
+        emit(state.copyWith(
+            candidate: null,
+            companyProfile: null,
+            candidateVideoFeed: [],
+            companyJobPosts: [],
+            userType: null,
+            companyJobPostVideoFeed: [],
+            id: null,
+            isAuthenticated: false,
+            isProcessing: false));
         await authService.logout();
       },
     );
@@ -51,18 +61,17 @@ class AuthenticationBloc  extends Bloc<AuthenticationEvent, AuthenticationState>
     } else {
       add(const AuthenticateCandidateEvent());
     }
-   // profileSetter.add(const ExecuteProfileUpdateEvent());
+    // profileSetter.add(const ExecuteProfileUpdateEvent());
   }
 
   Future<void> _handleAuthenticateOnStart(
     AuthenticateOnStartEvent event,
     Emitter<AuthenticationState> emit,
   ) async {
-   // await homeFeedState.reset();
+    // await homeFeedState.reset();
     await authService.autoLogin();
     emit(state.copyWith(isAuthenticated: authService.persistedUser != null));
     add(const AttachAuthenticationEvent());
-
   }
 
   Future<void> _handleAttach(
@@ -77,17 +86,18 @@ class AuthenticationBloc  extends Bloc<AuthenticationEvent, AuthenticationState>
         ),
       );
       if (authService.persistedUser!.userType == UserTypes.company) {
-        logger.logEvent("*******Inside Company Section ********" , tag: "COMPANY");
+        logger.logEvent("*******Inside Company Section ********",
+            tag: "COMPANY");
         add(const AuthenticateCompanyEvent());
-        Get.toNamed(RouteConstants.companyDashboard) ;
+        Get.toNamed(RouteConstants.companyDashboard);
       } else {
         add(const AuthenticateCandidateEvent());
-        logger.logEvent("*******Inside Candidate Section ********" , tag:"CANDIDATE");
+        logger.logEvent("*******Inside Candidate Section ********",
+            tag: "CANDIDATE");
         Get.toNamed(RouteConstants.candidateDashboard);
       }
     } else {
       Get.toNamed(RouteConstants.onBoardingSplash);
-
     }
   }
 
@@ -98,21 +108,21 @@ class AuthenticationBloc  extends Bloc<AuthenticationEvent, AuthenticationState>
     emit(
       state.copyWith(
         companyProfile: authService.companyOnboarding,
-        companyJobPosts: authService.companyJobPosts,
-        companyJobPostVideoFeed: authService.companyJobPostVideoFeed,
+        companyJobPosts: [],
+        companyJobPostVideoFeed: [],
       ),
     );
+    print("Thr company profile is :: ${state.companyProfile?.about}");
   }
 
   Future<void> _handleAuthenticateCandidate(
     AuthenticateCandidateEvent event,
     Emitter<AuthenticationState> emit,
   ) async {
-    debugPrint("The candidate inside AuthenticationBloc _handleAuthenticateCandidate ::: ${state.candidate?.firstName ?? "empty"} ");
-    emit(state.copyWith(candidate: authService.candidateOnBoarding ,
+    emit(state.copyWith(
+        candidate: authService.candidateOnBoarding,
         candidateVideoFeed: authService.candidateVideoFeed));
-    debugPrint("The candidate inside AuthenticationBloc _handleAuthenticateCandidate ::: ${state.candidate?.firstName ?? ""} ");
-   // emit(state.copyWith(candidateVideoFeed: authService.))
+    // emit(state.copyWith(candidateVideoFeed: authService.))
     // / candidateVideoFeed: authService.candidateVideoFeed,
   }
 }
diff --git a/lib/presentation/bloc/dashboard/home/company/company_home_feed_bloc.dart b/lib/presentation/bloc/dashboard/home/company/company_home_feed_bloc.dart
new file mode 100644
index 0000000..e69de29
diff --git a/lib/presentation/bloc/dashboard/home/company/company_home_feed_event.dart b/lib/presentation/bloc/dashboard/home/company/company_home_feed_event.dart
new file mode 100644
index 0000000..e69de29
diff --git a/lib/presentation/bloc/dashboard/home/company/company_home_feed_state.dart b/lib/presentation/bloc/dashboard/home/company/company_home_feed_state.dart
new file mode 100644
index 0000000..e69de29
diff --git a/lib/presentation/bloc/dashboard/home/company/for_you/company_for_you_state.dart b/lib/presentation/bloc/dashboard/home/company/for_you/company_for_you_state.dart
new file mode 100644
index 0000000..76735fe
--- /dev/null
+++ b/lib/presentation/bloc/dashboard/home/company/for_you/company_for_you_state.dart
@@ -0,0 +1,61 @@
+import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/dashboard/cadidate/home/candidate_feed.dart';
+import 'package:video_player/video_player.dart';
+
+import '../../../../../../data/models/apis/dashboard/company/home/company_home_feed_details.dart';
+import '../../../../../../data/models/apis/onboarding/bookmark/response/bookmark_collection.dart';
+import '../../../../../../data/models/apis/onboarding/bookmark/response/bookmark_infos.dart';
+
+
+class CompanyForYouState {
+  final List<CandidateFeed> forYouFeed;
+  final Map<int, VideoPlayerController> controller;
+  final Map<int, ImageProvider> thumbnail;
+  final CompanyHomeFeedDetails? homeFeedDetails;
+  final List<BookmarkCollection> bookmarkCollection;
+  final List<BookmarkInfo> bookmarkInfo;
+  final int lastPlayedForYouIndex;
+  final PageController pageController;
+  final bool isInitialized;
+  final int pageNumber;
+
+  CompanyForYouState({
+    this.forYouFeed = const [],
+    this.controller = const {},
+    this.thumbnail = const {},
+    PageController? pageController,
+    this.homeFeedDetails ,
+    this.bookmarkCollection = const [],
+    this.bookmarkInfo = const [],
+    this.lastPlayedForYouIndex = 0 ,
+    this.isInitialized = false,
+    this.pageNumber = 0,
+  }): pageController = pageController ?? PageController();
+
+  CompanyForYouState copyWith({
+    List<CandidateFeed>? forYouFeed,
+    Map<int, VideoPlayerController>? controller,
+    Map<int, ImageProvider>? thumbnail,
+    CompanyHomeFeedDetails? homeFeedDetails,
+    List<BookmarkCollection>? bookmarkCollection,
+    List<BookmarkInfo>? bookmarkInfo,
+    PageController? pageController,
+    int? lastPlayedForYouIndex,
+    bool? isInitialized,
+    int? pageNumber,
+  }) {
+    return CompanyForYouState(
+      forYouFeed: forYouFeed ?? this.forYouFeed,
+      controller: controller ?? this.controller,
+      thumbnail: thumbnail ?? this.thumbnail,
+      homeFeedDetails: homeFeedDetails ?? this.homeFeedDetails,
+      bookmarkCollection: bookmarkCollection ?? this.bookmarkCollection,
+      bookmarkInfo: bookmarkInfo ?? this.bookmarkInfo,
+      lastPlayedForYouIndex: lastPlayedForYouIndex ?? this.lastPlayedForYouIndex,
+      isInitialized: isInitialized ?? this.isInitialized,
+      pageNumber: pageNumber ?? this.pageNumber,
+      pageController: pageController ?? this.pageController,
+    );
+  }
+}
diff --git a/lib/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart b/lib/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart
index a1f0501..ff432e4 100644
--- a/lib/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart
+++ b/lib/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart
@@ -1,21 +1,14 @@
 import 'dart:io';
-
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
-import 'package:highlite_flutter_mvp/core/local_storage/highlite_candidate_storage_service.dart';
 import 'package:highlite_flutter_mvp/domain/repositories/persistent/persistent_repository.dart';
 import 'package:image_picker/image_picker.dart';
 import 'package:injectable/injectable.dart';
-
-import '../../../../../core/constants/video_feed_constants.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
 import '../../../../../core/services/firebase_service.dart';
 import '../../../../../data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed.dart';
 import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../../data/repositories/s3_bucket/presigner_types.dart';
 import '../../../../../domain/repositories/auth/auth_repository.dart';
 import '../../../../../domain/repositories/dashboard/candidate/profile/candidate_profile_repository.dart';
-import '../../../../../domain/repositories/integrated_uploader/integrated_uploader_repository.dart';
 import '../../../../widgets/utils/file.dart';
 import '../../auth/authentication_bloc.dart';
 import '../../auth/authentication_event.dart';
@@ -29,8 +22,9 @@ class CandidateEditorBloc
     required CandidateOnBoarding? candidate,
     List<CandidateVideoFeed>? videoFeed,
   }) : super(
-          CandidateEditorState(candidateOnBoarding:
-          candidate?? CandidateOnBoarding.defaultOnboarding(),
+          CandidateEditorState(
+              candidateOnBoarding:
+                  candidate ?? CandidateOnBoarding.defaultOnboarding(),
               candidateVideFeed: videoFeed ?? []),
         ) {
     on<CandidateEditorStartEvent>(
@@ -66,11 +60,11 @@ class CandidateEditorBloc
     final updatedCandidate = await candidateProfileService
         .updateCandidateProfile(event.candidate, id ?? '');
 
-    authService.candidateOnBoarding = updatedCandidate ;
+    authService.candidateOnBoarding = updatedCandidate;
     //
     // authentication
     //     .add(AuthenticateOnboardingEvent(id ?? '', userType ?? ''));
-    authentication.add(const AuthenticateCandidateEvent()) ;
+    authentication.add(const AuthenticateCandidateEvent());
 
     emit(state.copyWith(candidateOnBoarding: updatedCandidate));
   }
@@ -88,12 +82,13 @@ class CandidateEditorBloc
 
       final persisted = await persistenceService.get();
 
-
-      authService.candidateOnBoarding =    authService.candidateOnBoarding?.copyWith(
+      authService.candidateOnBoarding =
+          authService.candidateOnBoarding?.copyWith(
         profilePicture: url,
       );
-      authentication.add( const AuthenticateCandidateEvent());
-      add( UpdateCandidateEvent(candidate: state.candidateOnBoarding.copyWith(profilePicture: url))) ;
+      authentication.add(const AuthenticateCandidateEvent());
+      add(UpdateCandidateEvent(
+          candidate: state.candidateOnBoarding.copyWith(profilePicture: url)));
     }
   }
 }
diff --git a/lib/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart b/lib/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart
index 2b398ce..c456b8a 100644
--- a/lib/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart
+++ b/lib/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart
@@ -1,13 +1,18 @@
+import 'dart:io';
 import 'dart:math';
 
+import 'package:flutter/cupertino.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/dashboard/company/upload/company_job_post.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/dashboard/company/upload/company_job_post_video_feed.dart';
 import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/domain/repositories/dashboard/company/profile/company_profile_repository.dart';
+import 'package:image_picker/image_picker.dart';
 import 'package:injectable/injectable.dart';
 import 'package:video_player/video_player.dart';
 
 import '../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../core/services/firebase_service.dart';
 import '../../../../../data/models/apis/dashboard/cadidate/profile/id_request.dart';
 import '../../../../../data/models/s3_bucket/presigner/get_presigned_url_without_client.dart';
 import '../../../../../data/models/toast/progress_indicator.dart';
@@ -19,8 +24,10 @@ import '../../../../../domain/repositories/dashboard/company/home/company_job_po
 import '../../../../../domain/repositories/dashboard/company/home/company_job_post_video_feed_repository.dart';
 import '../../../../../domain/repositories/integrated_uploader/http_uploader_repository.dart';
 import '../../../../../domain/repositories/integrated_uploader/integrated_uploader_repository.dart';
+import '../../../../../domain/repositories/persistent/persistent_repository.dart';
 import '../../../../../domain/repositories/s3_bucket/presigned_respository.dart';
 import '../../../../widgets/toaster/toast_alert.dart';
+import '../../../../widgets/utils/file.dart';
 import '../../../toast/toast_bloc.dart';
 import '../../../toast/toast_event.dart';
 import '../../../upload_handler/upload_handler_builder.dart';
@@ -34,320 +41,266 @@ import 'company_editor_state.dart';
 class CompanyEditorBloc extends Bloc<CompanyEditorEvent, CompanyEditorState> {
   CompanyEditorBloc({
     required CompanyOnboarding companyOnboarding,
-    required List<CompanyJobPost> companyJobPosts ,
+    required List<CompanyJobPost> companyJobPosts,
     required List<CompanyJobPostVideoFeed> companyJobPostVideoFeed,
   }) : super(CompanyEditorState(
-            companyProfile: companyOnboarding,
-            companyJobPosts: companyJobPosts,
-            companyJobPostVideoFeed: companyJobPostVideoFeed)) {
+      companyProfile: companyOnboarding,
+      companyJobPosts: companyJobPosts,
+      companyJobPostVideoFeed: companyJobPostVideoFeed)) {
     on<UpdateCompanyEvent>(_handleUpdateCompany);
     on<ChangeCompanyProfilePictureEvent>(_handleUpdateCompanyProfile);
-    on<AttachCompanyVideoEvent>(_handleAttachVideo);
-    on<UploadVideoEvent>(_handleUploadVideo);
-    on<FileVideoEmptyEvent>(_handleFileVideoEmpty);
-    on<SaveVideoEvent>(_handleSaveVideo);
-    on<DeleteVideoEvent>(_handleDeleteVideo);
-    on<RetrieveNetworkVideoEvent>(_handleRetrieveNetworkVideo);
- //   on<RetrieveJobPostListEvent>(_handleRetrieveJobPostList);
-    on<CreateJobPostEvent>(_handleCreateJobPost);
-
-   // on<DeleteJobPostEvent>(_handleDeleteJobPost);
-    on<UpdateJobPostEvent>(_handleUpdateJobPost);
-    on<CancelJobPostEvent>(_handleCancelJobPost);
-    on<AttachEditCompanyVideoEvent>(_handleAttachEditVideo);
-    on<UploadhEditCompanyVideoEvent>(_handleUploadEditVideo);
-    on<SaveVideoEditEvent>(_handleSaveEditVideo);
-    on<DeleteVideoEditEvent>(_handleDeleteEditVideo);
   }
 
-  Future<void> _handleUpdateCompany(
-    UpdateCompanyEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
+  Future<void> _handleUpdateCompany(UpdateCompanyEvent event,
+      Emitter<CompanyEditorState> emit,) async {
+    final persisted = await persistenceService.get();
+    final id = persisted?.id;
+    final updatedCompanyProfile = await companyProfileService
+        .updateCompanyOnboarding(event.companyProfile, id ?? '');
     emit(state.copyWith(companyProfile: event.companyProfile));
     authentication.add(const AuthenticateCompanyEvent());
+
+    authService.companyOnboarding = updatedCompanyProfile;
+    //
+    // authentication
+    //     .add(AuthenticateOnboardingEvent(id ?? '', userType ?? ''));
+    authentication.add(const AuthenticateCompanyEvent());
+
+    emit(state.copyWith(companyProfile: updatedCompanyProfile));
   }
 
 
   Future<void> _handleUpdateCompanyProfile(
-    ChangeCompanyProfilePictureEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    uploadHandler.add(
-      const AddUploadIndicationEvent(
-        ProgressIndication(
-          id: "Profile",
-          placeholder: "Uploading Company Profile",
-          progress: 0,
-          millis: 10,
-        ),
-      ),
-    );
-    int randomNumber = Random().nextInt(100);
-    int timestamp = DateTime.now().millisecondsSinceEpoch;
-    String fileName = "${timestamp}_$randomNumber.png";
-    final response = await presignerService.getPresignedURLWithoutClient(
-      GetPresignedURLWithoutClientRequest(
-        filename: fileName,
-        type: PresignerTypes.profilePhoto,
-      ),
-    );
-    final urlToPut = response.data.getPreSignedURL;
-    final urlFragments = urlToPut.split('?');
-    await uploader.putUploadForUrl(
-      urlToPut,
-      // response.data.preSignedURLWithoutClient,
-      event.companyLogo!.file,
-      (progress) {
-        final millis = progress.transferredBytes - progress.totalBytes;
-        if (progress.progress == 100) {
-          uploadHandler.add(
-            UploadProgressEvent(
-              "Profile",
-              "Photo upload completed",
-              progress.progress,
-              millis * -1,
-            ),
+      ChangeCompanyProfilePictureEvent event,
+      Emitter<CompanyEditorState> emit,) async {
+    FileImage? profileImage =
+    await FileManager().takePhotoAndPreview(ImageSource.gallery);
+
+    if (profileImage != null) {
+      final file = File(profileImage.file.path);
+      var url = await FirebaseService.storeImageInFirebaseStorage(file);
+
+
+      authService.companyOnboarding =
+          authService.companyOnboarding?.copyWith(
+            companyLogo: url,
           );
+      authentication.add(const AuthenticateCompanyEvent());
+      add(UpdateCompanyEvent(
+          companyProfile: state.companyProfile.copyWith(companyLogo: url)));
+    }
+
+    Future<void> _handleAttachVideo(AttachCompanyVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      if (event.fileToUpload != null) {
+        final VideoPlayerController controller = VideoPlayerController.file(
+          event.fileToUpload!.file!,
+        );
+        await controller.setLooping(true);
+        await controller.initialize();
+        if (controller.value.duration.inSeconds <= 180 &&
+            controller.value.duration.inSeconds >= 15) {
+          emit(state.copyWith(
+              videoFile: event.fileToUpload,
+              videoForFile: controller,
+              newVideoForFile: controller,
+              isUploadInProgress: true,
+              isFilePickerEmpty: true,
+              newJobVideoFeedId: event.jobVideoFeedId));
+          add(const UploadVideoEvent());
         } else {
-          uploadHandler.add(
-            UploadProgressEvent(
-              "Profile",
-              "Uploading photo",
-              progress.progress,
-              millis * -1,
+          toaster.add(
+            const ShowToastEvent(
+              text: TranslationKeys.invalidVideoDuration,
+              state: ToastState.warning,
+              duration: const Duration(seconds: 5),
             ),
           );
         }
-      },
-    );
-
-    // add(
-    //   UpdateCompanyEvent(
-    //     companyProfile: state.companyProfile.copyWith(
-    //       companyLogo: urlFragments.first,
-    //     ),
-    //   ),
-    // );
-  }
-
-  Future<void> _handleAttachVideo(
-    AttachCompanyVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    if (event.fileToUpload != null) {
-      final VideoPlayerController controller = VideoPlayerController.file(
-        event.fileToUpload!.file!,
-      );
-      await controller.setLooping(true);
-      await controller.initialize();
-      if (controller.value.duration.inSeconds <= 180 &&
-          controller.value.duration.inSeconds >= 15) {
+      } else {
+        state.videoForFile?.dispose();
+        state.videoForUrl?.dispose();
         emit(state.copyWith(
-            videoFile: event.fileToUpload,
+            isFilePickerEmpty: false,
+            videoFile: null,
+            videoForFile: null,
+            videoUrl: null,
+            videoForUrl: null));
+      }
+    }
+
+    Future<void> _handleUploadVideo(UploadVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      if (state.videoFile != null) {
+        final response = await integratedUploader.uploadIntegratedToToast(
+          key: "Video",
+          file: state.videoFile!.file!,
+          extension: "mov",
+          bucket: PresignerTypes.video,
+          startPlaceholder: TranslationKeys.uploadingVideo,
+          progressPlaceholder: TranslationKeys.uploadingVideo,
+          completedPlaceholder: TranslationKeys.uploadVideoCompleted,
+          autoClose: true,
+        );
+
+        final VideoPlayerController controller =
+        VideoPlayerController.network(response.urlFragments.first);
+        await controller.setLooping(true);
+        await controller.initialize();
+        emit(
+          state.copyWith(
+            videoUrl: response.urlFragments.first,
+            videoForUrl: controller,
+            videoFile: null,
             videoForFile: controller,
             newVideoForFile: controller,
-            isUploadInProgress: true,
             isFilePickerEmpty: true,
-            newJobVideoFeedId: event.jobVideoFeedId));
-        add(const UploadVideoEvent());
-      } else {
-        toaster.add(
-          ShowToastEvent(
-            text: TranslationKeys.invalidVideoDuration,
-            state: ToastState.warning,
-            duration: const Duration(seconds: 5),
+            fileNameToUpload: response.fileName,
+            isUploadInProgress: false,
           ),
         );
       }
-    } else {
-      state.videoForFile?.dispose();
-      state.videoForUrl?.dispose();
-      emit(state.copyWith(
-          isFilePickerEmpty: false,
-          videoFile: null,
-          videoForFile: null,
-          videoUrl: null,
-          videoForUrl: null));
     }
-  }
-
-  Future<void> _handleUploadVideo(
-    UploadVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    if (state.videoFile != null) {
-      final response = await integratedUploader.uploadIntegratedToToast(
-        key: "Video",
-        file: state.videoFile!.file!,
-        extension: "mov",
-        bucket: PresignerTypes.video,
-        startPlaceholder: TranslationKeys.uploadingVideo,
-        progressPlaceholder: TranslationKeys.uploadingVideo,
-        completedPlaceholder: TranslationKeys.uploadVideoCompleted,
-        autoClose: true,
-      );
 
-      final VideoPlayerController controller =
-          VideoPlayerController.network(response.urlFragments.first);
-      await controller.setLooping(true);
-      await controller.initialize();
-      emit(
-        state.copyWith(
-          videoUrl: response.urlFragments.first,
-          videoForUrl: controller,
-          videoFile: null,
-          videoForFile: controller,
-          newVideoForFile: controller,
-          isFilePickerEmpty: true,
-          fileNameToUpload: response.fileName,
-          isUploadInProgress: false,
-        ),
-      );
+    Future<void> _handleFileVideoEmpty(FileVideoEmptyEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      emit(state.copyWith(isFilePickerEmpty: true));
     }
-  }
 
-  Future<void> _handleFileVideoEmpty(
-    FileVideoEmptyEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    emit(state.copyWith(isFilePickerEmpty: true));
-  }
+    Future<void> _handleSaveVideo(SaveVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      int activeCount = state.companyJobPosts
+          .where((element) => element.status == TranslationKeys.active)
+          .toList()
+          .length;
 
-  Future<void> _handleSaveVideo(
-    SaveVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    int activeCount = state.companyJobPosts
-        .where((element) => element.status == TranslationKeys.active)
-        .toList()
-        .length;
+      //  final canJobPost = await userSubStorage.isValidForJobPosting(activeCount);
 
-    //  final canJobPost = await userSubStorage.isValidForJobPosting(activeCount);
+      // TODO: NEED TO ADD canJobPost once userSubsStorage is created
+      if ((event.jobPostItem.status == TranslationKeys.active) ||
+          event.jobPostItem.status == TranslationKeys.inactive ||
+          event.jobPostItem.status == TranslationKeys.draft) {
+        CompanyJobPost oldItem = event.jobPostItem;
 
-    // TODO: NEED TO ADD canJobPost once userSubsStorage is created
-    if ((event.jobPostItem.status == TranslationKeys.active) ||
-        event.jobPostItem.status == TranslationKeys.inactive ||
-        event.jobPostItem.status == TranslationKeys.draft) {
-      CompanyJobPost oldItem = event.jobPostItem;
+        String oldStatus = event.jobPostItem.status;
 
-      String oldStatus = event.jobPostItem.status;
+        CompanyJobPost newItem =
+        event.jobPostItem.copyWith(status: "Pending");
 
-      CompanyJobPost newItem =
-          event.jobPostItem.copyWith(status: "Pending");
+        final items = state.companyJobPosts;
+        items.add(newItem);
 
-      final items = state.companyJobPosts;
-      items.add(newItem);
-
-      emit(state.copyWith(
-        companyJobPosts: items,
-      ));
+        emit(state.copyWith(
+          companyJobPosts: items,
+        ));
 
-      RetrieveJobPostListEvent(companyProfile: state.companyProfile);
+        RetrieveJobPostListEvent(companyProfile: state.companyProfile);
 
-      CompanyJobPostVideoFeed videoFeedItem =
-          await videoFeedIntegratedService.createVideoFeedForCompanyJobPost(
-              state.fileNameToUpload!, state.newJobVideoFeedId);
+        CompanyJobPostVideoFeed videoFeedItem =
+        await videoFeedIntegratedService.createVideoFeedForCompanyJobPost(
+            state.fileNameToUpload!, state.newJobVideoFeedId);
 
-      if (state.newJobVideoFeedId!.isNotEmpty) {
-      } else {
-        final idResponse =
-            await companyJobPostVideoFeedService.createCompanyJobPostVideoFeed(
-                videoFeedItem.copyWith(companyId: event.jobPostItem.companyId));
-        videoFeedItem = videoFeedItem.copyWith(id: idResponse.id);
+        if (state.newJobVideoFeedId!.isNotEmpty) {} else {
+          final idResponse =
+          await companyJobPostVideoFeedService.createCompanyJobPostVideoFeed(
+              videoFeedItem.copyWith(companyId: event.jobPostItem.companyId));
+          videoFeedItem = videoFeedItem.copyWith(id: idResponse.id);
 
-        final videoItems = state.companyJobPostVideoFeed;
+          final videoItems = state.companyJobPostVideoFeed;
 
-        videoItems.add(videoFeedItem.copyWith(id: idResponse.id));
+          videoItems.add(videoFeedItem.copyWith(id: idResponse.id));
 
-        emit(state.copyWith(
+          emit(state.copyWith(
             // companyJobPostVideoFeed: videoItems,
-            newJobVideoFeedId: videoItems.last.jobVideoFeedId));
+              newJobVideoFeedId: videoItems.last.jobVideoFeedId));
 
-        CompanyJobPost newJobPostItem =
-            // event.jobPostItem.copyWith(jobVideoFeedID: state.newJobVideoFeedId);
-            oldItem.copyWith(
-                jobVideoFeedID: state.newJobVideoFeedId, status: oldStatus);
+          CompanyJobPost newJobPostItem =
+          // event.jobPostItem.copyWith(jobVideoFeedID: state.newJobVideoFeedId);
+          oldItem.copyWith(
+              jobVideoFeedID: state.newJobVideoFeedId, status: oldStatus);
 
-        add(
-          CreateJobPostEvent(
-            // jobPostItem: newJobPostItem
-            jobPostItem: newJobPostItem,
+          add(
+            CreateJobPostEvent(
+              // jobPostItem: newJobPostItem
+              jobPostItem: newJobPostItem,
+            ),
+          );
+          // }
+          // emit(state.copyWith(newJobVideoFeedId: ""));
+        }
+      } else {
+        toaster.add(
+          ShowToastEvent(
+            title: "Insufficient Job Posting",
+            text: "You have 0 job post available.",
+            icon: "insufficient-job-posting",
+            link: "Tap here to buy more.",
+            linkAction: () {
+              // dashboardNavKey.currentState?.push(
+              //   MaterialPageRoute(
+              //     builder: (_) => const UpgradeSubscriptionPage(),
+              //   ),
+              // );
+            },
+            state: ToastState.insufficientAlert,
+            duration: const Duration(seconds: 3),
           ),
         );
-        // }
-        // emit(state.copyWith(newJobVideoFeedId: ""));
       }
-    } else {
-      toaster.add(
-        ShowToastEvent(
-          title: "Insufficient Job Posting",
-          text: "You have 0 job post available.",
-          icon: "insufficient-job-posting",
-          link: "Tap here to buy more.",
-          linkAction: () {
-            // dashboardNavKey.currentState?.push(
-            //   MaterialPageRoute(
-            //     builder: (_) => const UpgradeSubscriptionPage(),
-            //   ),
-            // );
-          },
-          state: ToastState.insufficientAlert,
-          duration: const Duration(seconds: 3),
-        ),
-      );
     }
-  }
 
-  Future<void> _handleDeleteVideo(
-    DeleteVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    state.videoForFile?.dispose();
-    state.videoForUrl?.dispose();
-
-    emit(state.copyWith(
-        fileNameToUpload: "",
-        newJobVideoFeedId: "",
-        editVideoForUrl: null,
-        isFilePickerEmpty: true,
-        videoFile: null,
-        videoForFile: null,
-        videoUrl: null,
-        videoForUrl: null));
-  }
-
-  Future<void> _handleRetrieveNetworkVideo(
-    RetrieveNetworkVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    List<CompanyJobPost> companyJobPosts = state.companyJobPosts;
-
-    if (companyJobPosts.isNotEmpty) {
-      String videoFeedId = companyJobPosts[event.itemIndex].jobVideoFeedId;
-      List<CompanyJobPostVideoFeed> videoItems =
-          state.companyJobPostVideoFeed;
-
-      if (videoItems.isNotEmpty) {
-        CompanyJobPostVideoFeed feed =
-            videoItems.firstWhere((item) => item.jobVideoFeedId == videoFeedId);
+    Future<void> _handleDeleteVideo(DeleteVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      state.videoForFile?.dispose();
+      state.videoForUrl?.dispose();
 
-        // ignore: unnecessary_null_comparison
-        if (feed != null) {
-          String playbackId = feed.playbackId;
-          if (playbackId.isNotEmpty) {
-            String uri = "https://stream.mux.com/$playbackId.m3u8";
+      emit(state.copyWith(
+          fileNameToUpload: "",
+          newJobVideoFeedId: "",
+          editVideoForUrl: null,
+          isFilePickerEmpty: true,
+          videoFile: null,
+          videoForFile: null,
+          videoUrl: null,
+          videoForUrl: null));
+    }
 
-            final VideoPlayerController controller =
-                VideoPlayerController.network(uri);
+    Future<void> _handleRetrieveNetworkVideo(RetrieveNetworkVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      List<CompanyJobPost> companyJobPosts = state.companyJobPosts;
 
-            await controller.setLooping(true);
-            await controller.initialize();
-            emit(
-              state.copyWith(
-                editVideoForUrl: controller,
-              ),
-            );
+      if (companyJobPosts.isNotEmpty) {
+        String videoFeedId = companyJobPosts[event.itemIndex].jobVideoFeedId;
+        List<CompanyJobPostVideoFeed> videoItems =
+            state.companyJobPostVideoFeed;
+
+        if (videoItems.isNotEmpty) {
+          CompanyJobPostVideoFeed feed =
+          videoItems.firstWhere((item) => item.jobVideoFeedId == videoFeedId);
+
+          // ignore: unnecessary_null_comparison
+          if (feed != null) {
+            String playbackId = feed.playbackId;
+            if (playbackId.isNotEmpty) {
+              String uri = "https://stream.mux.com/$playbackId.m3u8";
+
+              final VideoPlayerController controller =
+              VideoPlayerController.network(uri);
+
+              await controller.setLooping(true);
+              await controller.initialize();
+              emit(
+                state.copyWith(
+                  editVideoForUrl: controller,
+                ),
+              );
+            } else {
+              emit(
+                state.copyWith(
+                  editVideoForUrl: null,
+                ),
+              );
+            }
           } else {
             emit(
               state.copyWith(
@@ -369,124 +322,224 @@ class CompanyEditorBloc extends Bloc<CompanyEditorEvent, CompanyEditorState> {
           ),
         );
       }
-    } else {
-      emit(
-        state.copyWith(
-          editVideoForUrl: null,
-        ),
-      );
     }
-  }
 
 
+    Future<void> _handleCreateJobPost(CreateJobPostEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      final idResponse =
+      await companyJobPostService.createCompanyJobPosting(event.jobPostItem);
+      final items = state.companyJobPosts;
+      // items.add(event.jobPostItem.copyWith(id: idResponse.id));
+      items.last = event.jobPostItem
+          .copyWith(companyId: idResponse.id, status: event.jobPostItem.status);
+
+      // await userSubStorage.consumeJobPosting();
+
+      final videoItems = state.companyJobPostVideoFeed;
+
+      CompanyJobPostVideoFeed videoFeedItem =
+      videoItems.last.copyWith(companyId: event.jobPostItem.companyId);
+      videoItems.last = videoFeedItem;
+
+      await videoFeedIntegratedService.updateLastVideoFeedForCompanyJobPost(
+          videoItems.last.copyWith(companyId: event.jobPostItem.companyId));
+
+      // emit(state.copyWith(companyJobPosts: items, newJobVideoFeedId: ""));
+      await homeFeedState.listCompanyJobPosting();
+
+      state.videoForFile?.dispose();
+      state.videoForUrl?.dispose();
+
+      emit(state.copyWith(
+          companyJobPosts: items,
+          companyJobPostVideoFeed: videoItems,
+          fileNameToUpload: "",
+          newJobVideoFeedId: "",
+          isFilePickerEmpty: true,
+          videoFile: null,
+          videoForFile: null,
+          videoUrl: null,
+          videoForUrl: null));
+      RetrieveJobPostListEvent(companyProfile: state.companyProfile);
+    }
+
 
-  Future<void> _handleCreateJobPost(
-    CreateJobPostEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    final idResponse =
-        await companyJobPostService.createCompanyJobPosting(event.jobPostItem);
-    final items = state.companyJobPosts;
-    // items.add(event.jobPostItem.copyWith(id: idResponse.id));
-    items.last = event.jobPostItem
-        .copyWith(companyId: idResponse.id, status: event.jobPostItem.status);
+    Future<void> _handleUpdateJobPost(UpdateJobPostEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      int activeCount = state.companyJobPosts
+          .where((element) => element.status == TranslationKeys.active)
+          .toList()
+          .length;
 
-    // await userSubStorage.consumeJobPosting();
+      // final canJobPost = await userSubStorage.isValidForJobPosting(activeCount);
 
-    final videoItems = state.companyJobPostVideoFeed;
+      if ((event.jobPostItem.status == TranslationKeys.active) ||
+          event.jobPostItem.status == TranslationKeys.inactive ||
+          event.jobPostItem.status == TranslationKeys.draft) {
+        final items = state.companyJobPosts;
+        final index =
+        items.indexWhere((element) =>
+        element.jobPostId == event.jobPostItem.jobVideoFeedId);
+        items[index] = event.jobPostItem;
+        emit(
+          state.copyWith(
+            companyJobPosts: items,
+          ),
+        );
+        final result = await companyJobPostService
+            .updateCompanyJobPosting(event.jobPostItem);
+        items[index] = result;
+        await homeFeedState.listCompanyJobPosting();
+        emit(
+          state.copyWith(
+            companyJobPosts: items,
+          ),
+        );
+      } else {
+        toaster.add(
+          ShowToastEvent(
+            title: "Insufficient Job Posting",
+            text: "You have 0 job post available.",
+            icon: "insufficient-job-posting",
+            link: "Tap here to buy more.",
+            linkAction: () {
+              // dashboardNavKey.currentState?.push(
+              //   MaterialPageRoute(
+              //     builder: (_) => const UpgradeSubscriptionPage(),
+              //   ),
+              // );
+            },
+            state: ToastState.insufficientAlert,
+            duration: const Duration(seconds: 3),
+          ),
+        );
+      }
+    }
 
-    CompanyJobPostVideoFeed videoFeedItem =
-        videoItems.last.copyWith(companyId: event.jobPostItem.companyId);
-    videoItems.last = videoFeedItem;
+    Future<void> _handleCancelJobPost(CancelJobPostEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      emit(state.copyWith(newJobVideoFeedId: ""));
+    }
 
-    await videoFeedIntegratedService.updateLastVideoFeedForCompanyJobPost(
-        videoItems.last.copyWith(companyId: event.jobPostItem.companyId));
+    Future<void> _handleAttachEditVideo(AttachEditCompanyVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      if (event.fileToUpload != null) {
+        List<CompanyJobPost> companyJobPosts = state.companyJobPosts;
+        List<CompanyJobPostVideoFeed> videoItems = [];
+        CompanyJobPostVideoFeed? existingVideo;
 
-    // emit(state.copyWith(companyJobPosts: items, newJobVideoFeedId: ""));
-    await homeFeedState.listCompanyJobPosting();
+        if (companyJobPosts.isNotEmpty) {
+          String videoFeedId = companyJobPosts[event.itemIndex].jobVideoFeedId;
 
-    state.videoForFile?.dispose();
-    state.videoForUrl?.dispose();
+          videoItems = state.companyJobPostVideoFeed;
+          existingVideo = videoItems.firstWhere((item) =>
+          item.jobVideoFeedId ==
+              videoFeedId);
+        }
 
-    emit(state.copyWith(
-        companyJobPosts: items,
-        companyJobPostVideoFeed: videoItems,
-        fileNameToUpload: "",
-        newJobVideoFeedId: "",
-        isFilePickerEmpty: true,
-        videoFile: null,
-        videoForFile: null,
-        videoUrl: null,
-        videoForUrl: null));
-    RetrieveJobPostListEvent(companyProfile: state.companyProfile);
-  }
+        final VideoPlayerController controller = VideoPlayerController.file(
+          event.fileToUpload!.file!,
+        );
+        await controller.setLooping(true);
+        await controller.initialize();
+        if (controller.value.duration.inSeconds <= 180 &&
+            controller.value.duration.inSeconds >= 15) {
+          emit(state.copyWith(
+            videoFile: event.fileToUpload,
+            editVideoForUrl: controller,
+            isUploadInProgress: true,
+          ));
+          add(UploadhEditCompanyVideoEvent(jobPostVideoItem: existingVideo!));
+        } else {
+          toaster.add(
+            const ShowToastEvent(
+              text: TranslationKeys.invalidVideoDuration,
+              state: ToastState.warning,
+              duration: Duration(seconds: 5),
+            ),
+          );
+        }
+      } else {
+        state.videoForFile?.dispose();
+        state.videoForUrl?.dispose();
+        emit(state.copyWith(
+            editVideoForUrl: null,
+            videoFile: null,
+            videoForFile: null,
+            videoUrl: null,
+            videoForUrl: null));
+      }
+    }
 
+    Future<void> _handleUploadEditVideo(UploadhEditCompanyVideoEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      if (state.videoFile != null) {
+        final response = await integratedUploader.uploadIntegratedToToast(
+          key: "Video",
+          file: state.videoFile!.file!,
+          extension: "mov",
+          bucket: PresignerTypes.video,
+          startPlaceholder: TranslationKeys.uploadingVideo,
+          progressPlaceholder: TranslationKeys.uploadingVideo,
+          completedPlaceholder: TranslationKeys.uploadVideoCompleted,
+          autoClose: true,
+        );
 
-  Future<void> _handleUpdateJobPost(
-    UpdateJobPostEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    int activeCount = state.companyJobPosts
-        .where((element) => element.status == TranslationKeys.active)
-        .toList()
-        .length;
+        final VideoPlayerController controller =
+        VideoPlayerController.network(response.urlFragments.first);
 
-    // final canJobPost = await userSubStorage.isValidForJobPosting(activeCount);
+        add(SaveVideoEditEvent(
+            jobPostVideoItem: event.jobPostVideoItem,
+            controller: controller,
+            fileNameToUpload: response.fileName));
+      }
+    }
 
-    if ((event.jobPostItem.status == TranslationKeys.active) ||
-        event.jobPostItem.status == TranslationKeys.inactive ||
-        event.jobPostItem.status == TranslationKeys.draft) {
-      final items = state.companyJobPosts;
-      final index =
-          items.indexWhere((element) => element.jobPostId == event.jobPostItem.jobVideoFeedId);
-      items[index] = event.jobPostItem;
-      emit(
-        state.copyWith(
-          companyJobPosts: items,
+    Future<void> _handleSaveEditVideo(SaveVideoEditEvent event,
+        Emitter<CompanyEditorState> emit,) async {
+      toaster.add(
+        const ShowToastEvent(
+          text: "We're processing this video. Please wait..",
+          state: ToastState.warning,
+          duration: Duration(seconds: 35),
         ),
       );
-      final result = await companyJobPostService
-          .updateCompanyJobPosting(event.jobPostItem);
-      items[index] = result;
+
+      CompanyJobPostVideoFeed videoFeedItem =
+      await videoFeedIntegratedService.createEditVideoFeedForCompanyJobPost(
+          event.fileNameToUpload, event.jobPostVideoItem);
+      CompanyJobPostVideoFeed updateFeed =
+      await companyJobPostVideoFeedService
+          .updateCompanyJobPostVideoFeed(videoFeedItem);
+
+      await event.controller.setLooping(true);
+      await event.controller.initialize();
+
+      final videoItems = state.companyJobPostVideoFeed;
+
+      videoItems[videoItems.indexWhere((item) =>
+      item.jobVideoFeedId == updateFeed.jobVideoFeedId)] =
+          updateFeed;
       await homeFeedState.listCompanyJobPosting();
-      emit(
-        state.copyWith(
-          companyJobPosts: items,
-        ),
-      );
-    } else {
+      emit(state.copyWith(
+        editVideoForUrl: event.controller,
+        videoFile: null,
+        companyJobPostVideoFeed: videoItems,
+        isUploadInProgress: false,
+      ));
+    }
+
+    Future<void> _handleDeleteEditVideo(DeleteVideoEditEvent event,
+        Emitter<CompanyEditorState> emit,) async {
       toaster.add(
-        ShowToastEvent(
-          title: "Insufficient Job Posting",
-          text: "You have 0 job post available.",
-          icon: "insufficient-job-posting",
-          link: "Tap here to buy more.",
-          linkAction: () {
-            // dashboardNavKey.currentState?.push(
-            //   MaterialPageRoute(
-            //     builder: (_) => const UpgradeSubscriptionPage(),
-            //   ),
-            // );
-          },
-          state: ToastState.insufficientAlert,
-          duration: const Duration(seconds: 3),
+        const ShowToastEvent(
+          text: "We're deleting this video. Please wait..",
+          state: ToastState.warning,
+          duration: Duration(seconds: 5),
         ),
       );
-    }
-  }
 
-  Future<void> _handleCancelJobPost(
-    CancelJobPostEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    emit(state.copyWith(newJobVideoFeedId: ""));
-  }
-
-  Future<void> _handleAttachEditVideo(
-    AttachEditCompanyVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    if (event.fileToUpload != null) {
       List<CompanyJobPost> companyJobPosts = state.companyJobPosts;
       List<CompanyJobPostVideoFeed> videoItems = [];
       CompanyJobPostVideoFeed? existingVideo;
@@ -495,166 +548,53 @@ class CompanyEditorBloc extends Bloc<CompanyEditorEvent, CompanyEditorState> {
         String videoFeedId = companyJobPosts[event.itemIndex].jobVideoFeedId;
 
         videoItems = state.companyJobPostVideoFeed;
-        existingVideo = videoItems.firstWhere((item) => item.jobVideoFeedId == videoFeedId);
+        existingVideo =
+            videoItems.firstWhere((item) => item.jobVideoFeedId == videoFeedId);
       }
 
-      final VideoPlayerController controller = VideoPlayerController.file(
-        event.fileToUpload!.file!,
-      );
-      await controller.setLooping(true);
-      await controller.initialize();
-      if (controller.value.duration.inSeconds <= 180 &&
-          controller.value.duration.inSeconds >= 15) {
-        emit(state.copyWith(
-          videoFile: event.fileToUpload,
-          editVideoForUrl: controller,
-          isUploadInProgress: true,
-        ));
-        add(UploadhEditCompanyVideoEvent(jobPostVideoItem: existingVideo!));
-      } else {
-        toaster.add(
-          const ShowToastEvent(
-            text: TranslationKeys.invalidVideoDuration,
-            state: ToastState.warning,
-            duration: Duration(seconds: 5),
-          ),
-        );
-      }
-    } else {
+      CompanyJobPostVideoFeed updateFeed =
+      await companyJobPostVideoFeedService.updateCompanyJobPostVideoFeed(
+          existingVideo!.copyWith(
+              assetId: "",
+              playbackId: "",
+              uploadId: "",
+              jobStatus: "Inactive"));
+
+      CompanyJobPostVideoFeed result = await videoFeedIntegratedService
+          .updateLastVideoFeedForCompanyJobPost(updateFeed);
+
+      CompanyJobPost post = companyJobPosts[companyJobPosts
+          .indexWhere((item) =>
+      item.jobVideoFeedId == updateFeed.jobVideoFeedId)]
+          .copyWith(status: "Inactive");
+
+      CompanyJobPost resultPost =
+      await companyJobPostService.updateCompanyJobPosting(post);
+
+      companyJobPosts[companyJobPosts.indexWhere(
+              (item) => item.jobVideoFeedId == updateFeed.jobVideoFeedId)] =
+          resultPost;
+
+      videoItems[videoItems.indexWhere((item) =>
+      item.jobVideoFeedId == updateFeed.jobVideoFeedId)] =
+          result;
+
+      await homeFeedState.listCompanyJobPosting();
       state.videoForFile?.dispose();
       state.videoForUrl?.dispose();
+
       emit(state.copyWith(
+          companyJobPostVideoFeed: videoItems,
+          companyJobPosts: companyJobPosts,
+          fileNameToUpload: "",
+          newJobVideoFeedId: "",
           editVideoForUrl: null,
+          isFilePickerEmpty: true,
           videoFile: null,
+          isUploadInProgress: false,
           videoForFile: null,
           videoUrl: null,
           videoForUrl: null));
     }
   }
-
-  Future<void> _handleUploadEditVideo(
-    UploadhEditCompanyVideoEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    if (state.videoFile != null) {
-      final response = await integratedUploader.uploadIntegratedToToast(
-        key: "Video",
-        file: state.videoFile!.file!,
-        extension: "mov",
-        bucket: PresignerTypes.video,
-        startPlaceholder: TranslationKeys.uploadingVideo,
-        progressPlaceholder: TranslationKeys.uploadingVideo,
-        completedPlaceholder: TranslationKeys.uploadVideoCompleted,
-        autoClose: true,
-      );
-
-      final VideoPlayerController controller =
-          VideoPlayerController.network(response.urlFragments.first);
-
-      add(SaveVideoEditEvent(
-          jobPostVideoItem: event.jobPostVideoItem,
-          controller: controller,
-          fileNameToUpload: response.fileName));
-    }
-  }
-
-  Future<void> _handleSaveEditVideo(
-    SaveVideoEditEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    toaster.add(
-      const ShowToastEvent(
-        text: "We're processing this video. Please wait..",
-        state: ToastState.warning,
-        duration: Duration(seconds: 35),
-      ),
-    );
-
-    CompanyJobPostVideoFeed videoFeedItem =
-        await videoFeedIntegratedService.createEditVideoFeedForCompanyJobPost(
-            event.fileNameToUpload, event.jobPostVideoItem);
-    CompanyJobPostVideoFeed updateFeed =
-        await companyJobPostVideoFeedService
-            .updateCompanyJobPostVideoFeed(videoFeedItem);
-
-    await event.controller.setLooping(true);
-    await event.controller.initialize();
-
-    final videoItems = state.companyJobPostVideoFeed;
-
-    videoItems[videoItems.indexWhere((item) => item.jobVideoFeedId == updateFeed.jobVideoFeedId)] =
-        updateFeed;
-    await homeFeedState.listCompanyJobPosting();
-    emit(state.copyWith(
-      editVideoForUrl: event.controller,
-      videoFile: null,
-      companyJobPostVideoFeed: videoItems,
-      isUploadInProgress: false,
-    ));
-  }
-
-  Future<void> _handleDeleteEditVideo(
-    DeleteVideoEditEvent event,
-    Emitter<CompanyEditorState> emit,
-  ) async {
-    toaster.add(
-      const ShowToastEvent(
-        text: "We're deleting this video. Please wait..",
-        state: ToastState.warning,
-        duration: Duration(seconds: 5),
-      ),
-    );
-
-    List<CompanyJobPost> companyJobPosts = state.companyJobPosts;
-    List<CompanyJobPostVideoFeed> videoItems = [];
-    CompanyJobPostVideoFeed? existingVideo;
-
-    if (companyJobPosts.isNotEmpty) {
-      String videoFeedId = companyJobPosts[event.itemIndex].jobVideoFeedId;
-
-      videoItems = state.companyJobPostVideoFeed;
-      existingVideo = videoItems.firstWhere((item) => item.jobVideoFeedId == videoFeedId);
-    }
-
-    CompanyJobPostVideoFeed updateFeed =
-        await companyJobPostVideoFeedService.updateCompanyJobPostVideoFeed(
-            existingVideo!.copyWith(
-                assetId: "",
-                playbackId: "",
-                uploadId: "",
-                jobStatus: "Inactive"));
-
-    CompanyJobPostVideoFeed result = await videoFeedIntegratedService
-        .updateLastVideoFeedForCompanyJobPost(updateFeed);
-
-    CompanyJobPost post = companyJobPosts[companyJobPosts
-            .indexWhere((item) => item.jobVideoFeedId == updateFeed.jobVideoFeedId)]
-        .copyWith(status: "Inactive");
-
-    CompanyJobPost resultPost =
-        await companyJobPostService.updateCompanyJobPosting(post);
-
-    companyJobPosts[companyJobPosts.indexWhere(
-        (item) => item.jobVideoFeedId == updateFeed.jobVideoFeedId)] = resultPost;
-
-    videoItems[videoItems.indexWhere((item) => item.jobVideoFeedId == updateFeed.jobVideoFeedId)] =
-        result;
-
-    await homeFeedState.listCompanyJobPosting();
-    state.videoForFile?.dispose();
-    state.videoForUrl?.dispose();
-
-    emit(state.copyWith(
-        companyJobPostVideoFeed: videoItems,
-        companyJobPosts: companyJobPosts,
-        fileNameToUpload: "",
-        newJobVideoFeedId: "",
-        editVideoForUrl: null,
-        isFilePickerEmpty: true,
-        videoFile: null,
-        isUploadInProgress: false,
-        videoForFile: null,
-        videoUrl: null,
-        videoForUrl: null));
-  }
 }
diff --git a/lib/presentation/bloc/dashboard/profile/company/company_editor_event.dart b/lib/presentation/bloc/dashboard/profile/company/company_editor_event.dart
index 1d230ba..95884c4 100644
--- a/lib/presentation/bloc/dashboard/profile/company/company_editor_event.dart
+++ b/lib/presentation/bloc/dashboard/profile/company/company_editor_event.dart
@@ -21,8 +21,7 @@ class UpdateCompanyUserEvent extends CompanyEditorEvent {
 }
 
 class ChangeCompanyProfilePictureEvent extends CompanyEditorEvent {
-  const ChangeCompanyProfilePictureEvent({required this.companyLogo});
-  final FileImage? companyLogo;
+  const ChangeCompanyProfilePictureEvent();
 }
 
 class AttachCompanyVideoEvent extends CompanyEditorEvent {
diff --git a/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_bloc.dart b/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_bloc.dart
index e4e9cd4..a68f2cf 100644
--- a/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_bloc.dart
+++ b/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_bloc.dart
@@ -36,7 +36,6 @@ import '../../../auth/authentication_event.dart';
 class UploadCandidateBloc
     extends Bloc<UploadCandidateEvent, UploadCandidateState> {
   UploadCandidateBloc() : super(UploadCandidateState()) {
-   // on<StartUploadCandidate>(_handleStartUpload);
     on<PickVideoEvent>(_handlePickVideo);
     on<UpdateThumbnailEvent>(_handleUpdateThumbnail);
     on<UpdateDescriptionEvent>(_handleUpdateDescription);
@@ -48,53 +47,8 @@ class UploadCandidateBloc
     on<ResetIsVideoStateEvent>(_handleResetVideo);
   }
 
-  Future<void> _handleStartUpload(
-    StartUploadCandidate event,
-    Emitter<UploadCandidateState> emit,
-  ) async {
-
-    // emit(state.copyWith(isVideo: true)) ;
-    // FileModel? saveVideo = await FileManager().pickVideoWithModel(ImageSource.camera);
-    // if (saveVideo != null && saveVideo.file != null) {
-    //
-    //   // Print the original file path for debugging
-    //   print('Original video path: ${saveVideo.file?.path}');
-    //
-    //   File videoToUpload = saveVideo.file!; // Default to the original video file
-    //
-    //   try {
-    //     // Attempt to compress the video
-    //     final info = await VideoCompress.compressVideo(
-    //       saveVideo.file!.path,
-    //       quality: VideoQuality.LowQuality,
-    //       deleteOrigin: false,
-    //       includeAudio: true,
-    //     );
-    //
-    //     // Check if compression was successful
-    //     if (info != null && info.file != null && info.file!.existsSync()) {
-    //       print('Compression successful: ${info.path}');
-    //       videoToUpload = info.file!;
-    //       logger.logEvent("The info is after compressed ${info.path}");
-    //     } else {
-    //       print('Compression failed or was cancelled. Using original video.');
-    //     }
-    //   } catch (e) {
-    //     print('Error during video compression: $e');
-    //     print('Using original video instead.');
-    //   }
-    //
-    //   // Proceed with the selected video (compressed or original)
-    //   add(PickVideoEvent(video: videoToUpload));
-    //   emit(state.copyWith(isUpload: true)) ;
-    //
-    // } else {
-    //   print('Error: No video was selected or video file is invalid.');
-    // }
 
 
-  }
-
   Future<void> _handleResetVideo(
       ResetIsVideoStateEvent event, Emitter<UploadCandidateState> emit) async {
     emit(   state.copyWith(
diff --git a/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_event.dart b/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_event.dart
index e57af44..c7453fc 100644
--- a/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_event.dart
+++ b/lib/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_event.dart
@@ -4,7 +4,7 @@ import '../../../../../../data/models/onboarding/file_model.dart';
 
 abstract class UploadCandidateEvent {}
 
-class ToggleVideoEvent extends UploadCandidateEvent {}
+
 
 class PickVideoEvent extends UploadCandidateEvent {
   final File video;
@@ -12,9 +12,6 @@ class PickVideoEvent extends UploadCandidateEvent {
   PickVideoEvent({required this.video});
 }
 
-class StartUploadCandidate extends UploadCandidateEvent {
-  StartUploadCandidate() ;
-}
 
 class ResetIsVideoStateEvent extends UploadCandidateEvent{
   ResetIsVideoStateEvent() ;
diff --git a/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_bloc.dart b/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_bloc.dart
new file mode 100644
index 0000000..405577b
--- /dev/null
+++ b/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_bloc.dart
@@ -0,0 +1,13 @@
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/upload/company/upload_video/upload_company_event.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/upload/company/upload_video/upload_company_state.dart';
+
+class UploadCompanyBloc extends Bloc<UploadCompanyEvent , UploadCompanyState>{
+  UploadCompanyBloc():super(UploadCompanyState()){
+    on<PickVideoEvent>(_handlePickVideo) ;
+  }
+
+  Future<void> _handlePickVideo(PickVideoEvent event , Emitter<UploadCompanyState> emit) async{
+
+  }
+}
\ No newline at end of file
diff --git a/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_event.dart b/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_event.dart
new file mode 100644
index 0000000..3c456c8
--- /dev/null
+++ b/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_event.dart
@@ -0,0 +1,23 @@
+import 'dart:io';
+
+abstract class UploadCompanyEvent {}
+
+class PickVideoEvent extends UploadCompanyEvent {
+  final File video;
+
+  PickVideoEvent({required this.video});
+}
+
+class UpdateThumbnailEvent extends UploadCompanyEvent {
+  final String thumbnailUrl;
+
+  UpdateThumbnailEvent(this.thumbnailUrl);
+}
+
+class UploadCompanyJobPostEvent extends UploadCompanyEvent {
+  UploadCompanyJobPostEvent();
+}
+
+class UploadCompanyVideoEvent extends UploadCompanyEvent {
+  UploadCompanyVideoEvent();
+}
diff --git a/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_state.dart b/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_state.dart
new file mode 100644
index 0000000..aa793ad
--- /dev/null
+++ b/lib/presentation/bloc/dashboard/upload/company/upload_video/upload_company_state.dart
@@ -0,0 +1,75 @@
+import 'package:flutter/material.dart';
+
+import '../../../../../../data/models/apis/dashboard/cadidate/upload/video/mux_response.dart';
+import '../../../../../widgets/form/form.dart';
+
+class UploadCompanyState {
+  final String thumbnailUrl;
+  final TextEditingController descriptionController;
+  final TextEditingController locationController;
+  final TextEditingController positionController;
+  final TextEditingController salaryController;
+  final ValueNotifier<FormProviderState> formProvider;
+  final MuxResponse? muxResponse  ;
+  final GlobalKey<FormState> formState;
+  final List<String> tools;
+  final List<String> skills;
+  final String thumbnailWidth;
+  final String thumbnailHeight;
+
+  UploadCompanyState({
+    String? thumbnailUrl,
+    TextEditingController? descriptionController,
+    TextEditingController? locationController,
+    TextEditingController? positionController,
+    TextEditingController? salaryController,
+    ValueNotifier<FormProviderState>? formProvider,
+    GlobalKey<FormState>? formState,
+    List<String>? tools,
+    List<String>? skills,
+    this.thumbnailWidth = '125',
+    this.thumbnailHeight = '150',
+    this.muxResponse
+  })  : descriptionController =
+            descriptionController ?? TextEditingController(),
+        locationController = locationController ?? TextEditingController(),
+        positionController = positionController ?? TextEditingController(),
+        salaryController = salaryController ?? TextEditingController(),
+        formProvider = formProvider ?? ValueNotifier(FormProviderState.empty),
+        formState = formState ?? GlobalKey<FormState>(),
+        thumbnailUrl = thumbnailUrl ?? '',
+        tools = tools ?? <String>[],
+        skills = skills ?? <String>[];
+
+  // copyWith method for updating specific fields
+  UploadCompanyState copyWith({
+    String? thumbnailUrl,
+    MuxResponse? muxResponse ,
+    TextEditingController? descriptionController,
+    TextEditingController? locationController,
+    TextEditingController? positionController,
+    TextEditingController? salaryController,
+    ValueNotifier<FormProviderState>? formProvider,
+    GlobalKey<FormState>? formState,
+    List<String>? tools,
+    List<String>? skills,
+    String? thumbnailWidth,
+    String? thumbnailHeight,
+  }) {
+    return UploadCompanyState(
+      thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
+      muxResponse:  muxResponse ?? this.muxResponse,
+      descriptionController:
+          descriptionController ?? this.descriptionController,
+      locationController: locationController ?? this.locationController,
+      positionController: positionController ?? this.positionController,
+      salaryController: salaryController ?? this.salaryController,
+      formProvider: formProvider ?? this.formProvider,
+      formState: formState ?? this.formState,
+      tools: tools ?? this.tools,
+      skills: skills ?? this.skills,
+      thumbnailWidth: thumbnailWidth ?? this.thumbnailWidth,
+      thumbnailHeight: thumbnailHeight ?? this.thumbnailHeight,
+    );
+  }
+}
diff --git a/lib/presentation/pages/dashboard/candidate_dashboard.dart b/lib/presentation/pages/dashboard/candidate_dashboard.dart
index 78b06b8..5d77221 100644
--- a/lib/presentation/pages/dashboard/candidate_dashboard.dart
+++ b/lib/presentation/pages/dashboard/candidate_dashboard.dart
@@ -10,6 +10,7 @@ import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/candidate/candidate_home_feed.dart';
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/inbox/candidate/candidate_inbox.dart';
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/profile/candidate/self_candidate_profile.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/video_feed/candidate_info.dart';
 
 import '../../bloc/dashboard/auth/authentication_state.dart';
 import '../../bloc/dashboard/home/candidate/candidate_home_feed_event.dart';
@@ -19,7 +20,6 @@ import '../../widgets/dashboard/home_navigator.dart';
 import '../../widgets/inbox/inbox_end_drawer.dart';
 import '../../widgets/toaster/toaster_widget.dart';
 import '../../widgets/uploader/overlaying_toast_stack.dart';
-import '../navigation/profile/candidate/candidate_profile_v2.dart';
 import '../navigation/search/candidate/candidate_search.dart';
 import '../navigation/upload /candidate/upload_candidate.dart';
 
@@ -28,7 +28,7 @@ class CandidateTabs {
   static String videoFeed = "Home";
   static String search = "Search";
   static String inbox = "Inbox";
-  static String bookmarks = "Bookmarks";
+  static String upload = "Upload";
   static String profile = "Profile";
 }
 
@@ -50,36 +50,36 @@ class _CandidateDashboardState extends State<CandidateDashboard> {
   @override
   void initState() {
     _pages = [
-      const DashboardTab(
+       DashboardTab(
+        tag: CandidateTabs.videoFeed,
         widget: CandidateHomeFeed(),
-        title: '',
         icon: AssetConstant.homeIcon,
         selectedIcon: AssetConstant.homeSelectedIcon,
       ),
       DashboardTab(
+        tag: CandidateTabs.search,
         widget: CandidateSearchPage(),
-        title: '',
         icon: AssetConstant.searchIcon,
         selectedIcon: AssetConstant.searchIconSelected,
       ),
-      const DashboardTab(
+       DashboardTab(
+        tag: CandidateTabs.upload,
         widget: UploadCandidate(),
-        title: "",
         isHighliteLogo: true,
         icon: AssetConstant.icHighLiteSMLogoSmall,
         selectedIcon: AssetConstant.icHighLiteSMLogoSmall,
       ),
       DashboardTab(
+        tag: CandidateTabs.inbox,
         widget: CandidateInboxPage(
           scaffoldState: _scaffoldState,
         ),
-        title: '',
         icon: AssetConstant.messageIcon,
         selectedIcon: AssetConstant.messageIconSelected,
       ),
-      const DashboardTab(
+       DashboardTab(
+          tag: CandidateTabs.profile,
           widget: SelfCandidateProfile(),
-          title: '',
           icon: AssetConstant.profileIcon,
           selectedIcon: AssetConstant.profileSelectedIcon)
     ];
@@ -90,77 +90,78 @@ class _CandidateDashboardState extends State<CandidateDashboard> {
   Widget build(BuildContext context) {
     return BlocBuilder<AuthenticationBloc, AuthenticationState>(
       builder: (context, authState) {
-        final pagea = _pages
+        final pages = _pages
             .where((element) => authState.isAuthenticated
                 ? true
                 : element.title != CandidateTabs.profile)
             .toList();
-        return  CandidateHomeFeedProvider(
+        return CandidateHomeFeedProvider(
           child: BlocBuilder<CandidateHomeFeedBloc, CandidateHomeFeedState>(
-            builder: (context , state) {
-              return DefaultTabController(
-                  length: _pages.length,
-                  initialIndex: 0,
-                  animationDuration: const Duration(milliseconds: 100),
-                  child: Scaffold(
-                    key: _scaffoldState,
-                    body: HomeNavigator(
-                        builder: (navKey) => OverlayingToastStack(
-                                toasts: const [
-                                  //UploadHandlerToast(),
-                                  ToasterWidget(),
-                                  CenterPrompt()
-                                ],
-                                child: TabBarView(
-                                  key: Key(CandidateTabs.mainTabs),
-                                  physics: const NeverScrollableScrollPhysics(),
-                                  children: _pages
-                                      .map(
-                                        (page) => page.widget,
-                                      )
-                                      .toList(),
-                                ))),
-                    endDrawer: _selectedPageIndex == 2
-                        ? BlocBuilder<AuthenticationBloc, AuthenticationState>(
-                            builder: (context, authState) => InboxEndDrawer(
-                              profile: "",
-                              name: authState.candidate?.fullName ?? "",
-                              onArchiveOpen: () {
-                                Get.toNamed(RouteConstants.provideFeedbackSubpage);
-                                // TODO: NEED TO ADD CANDIDATE ARCHIVE INBOX PAGE
-                                // CandidateArchivedInbox(),
-                              },
-                              onContactSupportOpen: () {},
-                            ),
-                          )
-                        : null,
-                    bottomNavigationBar: DashboardTabs(
-                      tabs: _pages,
-                      selectedIndex: _selectedPageIndex,
-                      onDarkTabs: onDarkTabs,
-                      isHighliteLogo: _selectedPageIndex == 2 ? true : false,
-                      onSelectPage: (index) async {
-                        context.read<CandidateHomeFeedBloc>().add(BottomNavTabChanged(index: index)) ;
-                        print("The current index is ::$index");
-                        setState(
-                          () {
-                            _selectedPageIndex = index;
-                            onDarkTabs =
-                                _selectedPageIndex == 0 || _selectedPageIndex == 2;
-                            Future.delayed(const Duration(milliseconds: 300))
-                                .then((value) {
-                              SystemChrome.setSystemUIOverlayStyle(onDarkTabs
-                                  ? SystemUiOverlayStyle.light
-                                  : SystemUiOverlayStyle.dark);
-                            });
+              builder: (context, state) {
+            return DefaultTabController(
+              length: pages.length,
+              initialIndex: 0,
+              animationDuration: const Duration(milliseconds: 100),
+              child: Scaffold(
+                key: _scaffoldState,
+                body: HomeNavigator(
+                    builder: (navKey) => OverlayingToastStack(
+                            toasts: const [
+                              //UploadHandlerToast(),
+                              ToasterWidget(),
+                              CenterPrompt()
+                            ],
+                            child: TabBarView(
+                              key: Key(CandidateTabs.mainTabs),
+                              physics: const NeverScrollableScrollPhysics(),
+                              children: _pages
+                                  .map(
+                                    (page) => page.widget,
+                                  )
+                                  .toList(),
+                            ))),
+                endDrawer: _selectedPageIndex == 2
+                    ? BlocBuilder<AuthenticationBloc, AuthenticationState>(
+                        builder: (context, authState) => InboxEndDrawer(
+                          profile: authState.candidate?.profilePicture ?? '',
+                          name: authState.candidate?.fullName ?? "",
+                          onArchiveOpen: () {
+                            Get.toNamed(RouteConstants.provideFeedbackSubpage);
+                            // TODO: NEED TO ADD CANDIDATE ARCHIVE INBOX PAGE
+                            // CandidateArchivedInbox(),
                           },
-                        );
+                          onContactSupportOpen: () {},
+                        ),
+                      )
+                    : null,
+                bottomNavigationBar: DashboardTabs(
+                  tabs: _pages,
+                  selectedIndex: _selectedPageIndex,
+                  onDarkTabs: onDarkTabs,
+                  isHighliteLogo: _selectedPageIndex == 2 ? true : false,
+                  onSelectPage: (index) async {
+                    context
+                        .read<CandidateHomeFeedBloc>()
+                        .add(BottomNavTabChanged(index: index));
+                    print("The current index is ::$index");
+                    setState(
+                      () {
+                        _selectedPageIndex = index;
+                        onDarkTabs =
+                            _selectedPageIndex == 0 || _selectedPageIndex == 2;
+                        Future.delayed(const Duration(milliseconds: 300))
+                            .then((value) {
+                          SystemChrome.setSystemUIOverlayStyle(onDarkTabs
+                              ? SystemUiOverlayStyle.light
+                              : SystemUiOverlayStyle.dark);
+                        });
                       },
-                    ),
-                  ),
-              );
-            }
-          ),
+                    );
+                  },
+                ),
+              ),
+            );
+          }),
         );
       },
     );
diff --git a/lib/presentation/pages/dashboard/company_dashboard.dart b/lib/presentation/pages/dashboard/company_dashboard.dart
index a04a5a6..84fd30f 100644
--- a/lib/presentation/pages/dashboard/company_dashboard.dart
+++ b/lib/presentation/pages/dashboard/company_dashboard.dart
@@ -6,6 +6,8 @@ import 'package:highlite_flutter_mvp/dummy_page.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_state.dart';
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/candidate/candidate_home_feed.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/company/comapany_home_feed.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/search/candidate/candidate_search.dart';
 
 import '../../widgets/center_prompt_widget/center_prompt.dart';
 import '../../widgets/dashboard/dashboard_tabs.dart';
@@ -14,6 +16,7 @@ import '../../widgets/inbox/inbox_end_drawer.dart';
 import '../../widgets/toaster/toaster_widget.dart';
 import '../../widgets/uploader/overlaying_toast_stack.dart';
 import '../navigation/inbox/candidate/candidate_inbox.dart';
+import '../navigation/profile/company/self_company_profile.dart';
 import '../navigation/upload /company/upload_company.dart';
 
 class CompanyTabs {
@@ -21,7 +24,7 @@ class CompanyTabs {
   static String videoFeed = "Home";
   static String search = "Search";
   static String inbox = "Inbox";
-  static String bookmarks = "Bookmarks";
+  static String upload = "Upload";
   static String profile = "Profile";
 }
 
@@ -45,35 +48,35 @@ class _CompanyDashboardState extends State<CompanyDashboard>
   void initState() {
     _pages = [
       DashboardTab(
-        widget: CandidateHomeFeed(),
-        title: CompanyTabs.videoFeed,
+        tag:CompanyTabs.videoFeed ,
+        widget: CompanyHomeFeed(),
         icon: AssetConstant.homeSelectedIcon,
         selectedIcon: AssetConstant.homeSelectedIcon,
       ),
       DashboardTab(
-        widget: const DummyPage(),
-        title: CompanyTabs.search,
+        tag: CompanyTabs.search,
+        widget: const CandidateSearchPage(),
         icon: AssetConstant.searchIcon,
         selectedIcon: AssetConstant.searchIconSelected,
       ),
-      const DashboardTab(
+       DashboardTab(
+        tag: CompanyTabs.upload,
         widget: UploadCompany(),
-        title: "",
         isHighliteLogo: true,
         icon: AssetConstant.icHighLiteSMLogoSmall,
         selectedIcon: AssetConstant.icHighLiteSMLogoSmall,
       ),
       DashboardTab(
+        tag: CompanyTabs.inbox,
         widget: CandidateInboxPage(
           scaffoldState: _scaffoldState,
         ),
-        title: CompanyTabs.inbox,
         icon: AssetConstant.messageIcon,
         selectedIcon: AssetConstant.messageIconSelected,
       ),
       DashboardTab(
-        widget: DummyPage(),
-        title: CompanyTabs.profile,
+        tag: CompanyTabs.profile,
+        widget: const SelfCompanyProfile(),
       )
     ];
     super.initState();
@@ -85,7 +88,7 @@ class _CompanyDashboardState extends State<CompanyDashboard>
         builder: (context, authState) {
       final pages = _pages
           .where(
-            (element) => authState.isAuthenticated ? true : true,
+            (element) => authState.isAuthenticated ? true : element.title != CompanyTabs.profile,
           )
           .toList();
       return
@@ -122,8 +125,7 @@ class _CompanyDashboardState extends State<CompanyDashboard>
                 endDrawer: _selectedPageIndex == 2
                     ? BlocBuilder<AuthenticationBloc, AuthenticationState>(
                         builder: (context, authState) => InboxEndDrawer(
-                          profile: "",
-                         // profile: authState.companyProfile?.companyLogo ?? "",
+                          profile: authState.companyProfile?.companyLogo ?? '',
                           name: authState.companyProfile?.companyName ?? "",
                           onArchiveOpen: () {
                             // globalNavKey.currentState!.push(
diff --git a/lib/presentation/pages/navigation/home/company/comapany_home_feed.dart b/lib/presentation/pages/navigation/home/company/comapany_home_feed.dart
new file mode 100644
index 0000000..4f6d700
--- /dev/null
+++ b/lib/presentation/pages/navigation/home/company/comapany_home_feed.dart
@@ -0,0 +1,177 @@
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/core/resources/color_constants.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate/candidate_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate_home_feed_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate_home_feed_event.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/candidate/tabs/candidate_following_tab.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/company/tabs/company_candidate_tab.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/company/tabs/company_for_you_tab.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/home/company/tabs/company_job.dart';
+
+import '../../../../../core/resources/typography_theme.dart';
+import '../../../../bloc/dashboard/home/candidate/candidate/candidate_event.dart';
+import '../../../../bloc/dashboard/home/candidate/for_you/candidate_for_you_bloc.dart';
+import '../../../../bloc/dashboard/home/candidate/for_you/candidate_for_you_event.dart';
+import '../../../../widgets/constants/text_style.dart';
+
+class CompanyFeedTab {
+  final String title;
+  final Widget widget;
+
+  const CompanyFeedTab({required this.title, required this.widget});
+}
+
+
+class CompanyHomeFeedProvider extends StatelessWidget {
+  final Widget child ;
+  const CompanyHomeFeedProvider({
+    required this.child ,
+    super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return MultiBlocProvider(
+      providers: [
+        BlocProvider<CandidateForYouBloc>(
+          create: (context) => CandidateForYouBloc()..add(StartCandidateForYouEvent()),
+        ),
+        BlocProvider<CandidateBloc>(
+          create: (context) => CandidateBloc()..add(StartCandidateEvent()),
+        ),
+        // BlocProvider<JobsBloc>(
+        //   create: (context) => JobsBloc(),
+        // ),
+        // BlocProvider<FollowingBloc>(
+        //   create: (context) => FollowingBloc(),
+        // ),
+        BlocProvider<CandidateHomeFeedBloc>(
+          create: (context) => CandidateHomeFeedBloc(
+            candidateForYouBloc: BlocProvider.of<CandidateForYouBloc>(context),
+            candidateBloc: BlocProvider.of<CandidateBloc>(context),
+            // jobsBloc: BlocProvider.of<JobsBloc>(context),
+            // followingBloc: BlocProvider.of<FollowingBloc>(context),
+          ),
+        ),
+      ],
+      child: child,
+    );
+  }
+}
+
+
+class CompanyHomeFeed extends StatefulWidget {
+  const CompanyHomeFeed({super.key});
+
+  @override
+  State<CompanyHomeFeed> createState() => _CompanyHomeFeedState();
+}
+
+class _CompanyHomeFeedState extends State<CompanyHomeFeed> with SingleTickerProviderStateMixin {
+
+  Widget candidate = CompanyCandidateTab();
+  Widget jobs = CompanyJob();
+  Widget forYouTab =  CompanyForYouTab();
+  Widget followingTab = const CandidatesFollowing(); // WILL CHANGE ONCE NEW VIDEO PLAYER IS CREATED
+  late int initialIndex = 0;
+  late TabController _tabController;
+  int _previousIndex = 0;
+
+  @override
+  void initState() {
+    super.initState();
+    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.light);
+    _tabController = TabController(length: 4, vsync: this) ;
+    _tabController.addListener(_handleTabSelection);
+  }
+
+
+
+  @override
+  void dispose() {
+    _tabController.removeListener(_handleTabSelection);
+    _tabController.dispose();
+    super.dispose();
+  }
+
+
+  void _handleTabSelection() {
+    // Ensure the event is triggered on both tab tap and swipe
+    if (_tabController.index != _previousIndex) {
+      _previousIndex = _tabController.index;
+      context.read<CandidateHomeFeedBloc>().add(HomeFeedTabChange(index: _tabController.index));
+    }
+  }
+  @override
+  Widget build(BuildContext context) {
+    final pages = [
+      CompanyFeedTab(title: "Candidates", widget: candidate),
+      CompanyFeedTab(title: "Jobs", widget: jobs),
+      CompanyFeedTab(title: "For You", widget: forYouTab),
+      //  if (state.followingFeeds.isNotEmpty)
+      CompanyFeedTab(title: "Following", widget: followingTab),
+    ];
+    return DefaultTabController(
+
+      length: pages.length,
+      initialIndex: initialIndex,
+      child: Scaffold(
+        backgroundColor: ColorConstant.tabSurface,
+        body: Center(
+          child: Stack(
+            alignment: Alignment.center,
+            children: [
+              TabBarView(
+                controller: _tabController,
+                key: const Key("VideoFeedTabs"),
+                // physics: const NeverScrollableScrollPhysics(),
+                children: pages.map((e) => e.widget).toList(),
+              ),
+              Padding(
+                padding: const EdgeInsets.only(right: 40.0),
+                child: SafeArea(
+                  child: Align(
+                    alignment: Alignment.topCenter,
+                    child: Container(
+                      alignment: Alignment.topCenter,
+                      width: double.infinity,
+                      child: TabBar(
+                        controller: _tabController,
+                        padding: EdgeInsets.zero,
+                        isScrollable: true,
+                        indicatorColor: ColorConstant.shade00,
+                        dividerColor: Colors.transparent,
+                        indicatorSize: TabBarIndicatorSize.label,
+                        labelColor: ColorConstant.shade00,
+                        labelStyle: BaseTextStyle(
+                          fontSize: TypographyTheme.paragraph_p2,
+                          color: ColorConstant.shade00,
+                          fontWeight: FontWeight.w600,
+                        ),
+                        indicatorPadding: const EdgeInsets.symmetric(
+                            horizontal: 0.0, vertical: 6.0),
+                        labelPadding: const EdgeInsets.symmetric(
+                            horizontal: 8, vertical: 0.0),
+                        tabs:
+                        pages.map((page) => Tab(text: page.title)).toList(),
+                        onTap: (index) {
+                          context.read<CandidateHomeFeedBloc>().add( HomeFeedTabChange(index: index)) ;
+                          debugPrint("The index is $index");
+                          setState(() {
+                            initialIndex = index;
+                          });
+                        },
+
+                      ),
+                    ),
+                  ),
+                ),
+              )
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
diff --git a/lib/presentation/pages/navigation/home/company/tabs/company_candidate_tab.dart b/lib/presentation/pages/navigation/home/company/tabs/company_candidate_tab.dart
new file mode 100644
index 0000000..89f1dd1
--- /dev/null
+++ b/lib/presentation/pages/navigation/home/company/tabs/company_candidate_tab.dart
@@ -0,0 +1,218 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate/candidate_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate/candidate_state.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/profile/candidate/public_profile/candidate_public_video.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/overlay/bookmark/select_bookmark_overlay.dart';
+import 'package:loading_animation_widget/loading_animation_widget.dart';
+import 'package:share_plus/share_plus.dart';
+
+import '../../../../../../app.dart';
+import '../../../../../../core/resources/asset_constants.dart';
+import '../../../../../../core/resources/color_constants.dart';
+import '../../../../../bloc/center_prompt/center_prompt_builder.dart';
+import '../../../../../bloc/center_prompt/center_prompt_event.dart';
+import '../../../../../bloc/dashboard/auth/authentication_bloc.dart';
+import '../../../../../bloc/dashboard/auth/authentication_state.dart';
+import '../../../../../bloc/dashboard/home/candidate/candidate/candidate_event.dart';
+import '../../../../../bloc/toast/toast_bloc.dart';
+import '../../../../../bloc/toast/toast_event.dart';
+import '../../../../../widgets/empty_feed/empty_feed.dart';
+import '../../../../../widgets/overlay/super_message/super_message_sender.dart';
+import '../../../../../widgets/toaster/toast_alert.dart';
+import '../../../../../widgets/video_feed/video_feed_item.dart';
+
+class CompanyCandidateTab extends StatefulWidget with WidgetsBindingObserver {
+  CompanyCandidateTab({super.key}) {
+    WidgetsBinding.instance.addObserver(this);
+  }
+
+  @override
+  State<CompanyCandidateTab> createState() => _CompanyCandidateTabState();
+}
+
+class _CompanyCandidateTabState extends State<CompanyCandidateTab> {
+  bool isSuperMessaged = false;
+
+  bool isLiked = false;
+
+  bool isdisliked = false;
+
+  @override
+  Widget build(BuildContext context) {
+    return BlocBuilder<AuthenticationBloc, AuthenticationState>(
+      builder: (context, authState) {
+        if (authState.candidate == null) {
+          return Center(
+            child: LoadingAnimationWidget.fourRotatingDots(
+              size: 50,
+              color: ColorConstant.shade00,
+            ),
+          );
+        }
+
+        return BlocBuilder<CandidateBloc, CandidateState>(
+          builder: (context, state) {
+            if (state.controller.isEmpty) {
+              return const EmptyFeedPage(
+                profile: "",
+                emptyDesc: "Finding Best Job For You ",
+              );
+            }
+            if (state.controller.isNotEmpty) {
+              return PageView.builder(
+                  itemCount: state.candidateFeed.length,
+                  scrollDirection: Axis.vertical,
+                  physics: const ClampingScrollPhysics(),
+                  onPageChanged: (page) {
+                    context.read<CandidateBloc>().add(PageChangedEvent(page));
+                  },
+                  itemBuilder: (context, index) {
+                    print(
+                        "The controller in Candidate Tab :: ${state.controller[state.candidateFeed[index].playbackId]}");
+                    return GestureDetector(
+                        child: VideoFeedItem(
+                            controller: state.controller[
+                            state.candidateFeed[index].playbackId]!,
+                            imageProvider: state.thumbnail[
+                            state.candidateFeed[index].playbackId]!,
+                            contents: VideoFeedContents(
+                                title: state.candidateFeed[index].candidateOnBoarding?.position ??
+                                    '',
+                                name: state.candidateFeed[index]
+                                    .candidateOnBoarding?.fullName ?? '',
+                                location: state.candidateFeed[index]
+                                    .candidateOnBoarding?.location ?? '',
+                                salary:
+                                "${state.candidateFeed[index].candidateOnBoarding?.salary}/hr",
+                                jobFlexibility:
+                                state.candidateFeed[index].candidateOnBoarding?.workType ??
+                                    '',
+                                skills: state.candidateFeed[index].candidateOnBoarding?.skills ??
+                                    [],
+                                profile: state.candidateFeed[index].candidateOnBoarding?.profilePicture ??
+                                    ''),
+                            state: VideoFeedContentState(
+                                isFollowing: false,
+                                enabledFollowButton: true,
+                                enabledActionButtons: true,
+                                isSuperMessaged: isSuperMessaged,
+                                isBookmarked: state.bookmarkInfo.where((element) => element.referenceId == state.candidateFeed[index].candidateVideoFeedId).isNotEmpty,
+                                isLiked: isLiked,
+                                isDisliked: isdisliked,
+                                isShared: false),
+                            onTapProfile: () async {
+                              if (state
+                                  .controller[
+                              state.candidateFeed[index].playbackId]!
+                                  .value
+                                  .isPlaying) {
+                                state.controller[
+                                state.candidateFeed[index].playbackId]!
+                                    .pause();
+                              }
+                              globalNavKey.currentState!.push(MaterialPageRoute(
+                                  builder: (_) => CandidatePublicProfile(
+                                    onBack: () {
+                                      state.controller[state
+                                          .candidateFeed[index]
+                                          .playbackId]!
+                                          .play();
+                                    },
+                                    candidateFeed:
+                                    state.candidateFeed[index],
+                                  )));
+                            },
+                            onFollowTap: () {},
+                            onSuperMessageTap: () {
+                              SuperMessageSenderOverlay.showSuperMessage([])
+                                  .then((sendResponse) {
+                                setState(() {
+                                  centerPrompt.add(
+                                    const ShowPromptEvent(
+                                        asset:
+                                        AssetConstant.lightingSelectedIcon),
+                                  );
+                                  isSuperMessaged = !isSuperMessaged;
+                                });
+
+                                toaster.add(
+                                  const ShowToastEvent(
+                                    text:
+                                    "Your super message has been sent successfully.",
+                                    icon: AssetConstant.checkCircleIcon,
+                                    state: ToastState.normal,
+                                    duration: Duration(seconds: 3),
+                                  ),
+                                );
+                              });
+                            },
+                            onBookmarkTap: () async {
+                              if (state.bookmarkInfo
+                                  .where((element) =>
+                              element.referenceId ==
+                                  state.candidateFeed[index]
+                                      .candidateVideoFeedId)
+                                  .isNotEmpty) {} else {
+                                await SelectBookmarkOverlay
+                                    .showBookmarkSelectionByUserId(
+                                    candidateId: state
+                                        .candidateFeed[index].candidateId,
+                                    videoFeedId: state.candidateFeed[index]
+                                        .candidateVideoFeedId,
+                                    context: context).then((value) {
+                                  context.read<CandidateBloc>().add(
+                                      RetrieveBookmark());
+                                  if(value == true){
+                                    centerPrompt.add(
+                                      ShowPromptEvent(
+                                          asset: AssetConstant.bookmarkIconSelectedV2),
+                                    );
+                                  }
+                                });
+                              }
+                            } ,
+                            onLike: () {
+                              setState(() {
+                                centerPrompt.add(
+                                  const ShowPromptEvent(
+                                      asset: AssetConstant.likeSelectedIcon),
+                                );
+                                isLiked = !isLiked;
+                                isdisliked = false;
+                              });
+                            },
+                            onDislike: () {
+                              setState(() {
+                                centerPrompt.add(
+                                  const ShowPromptEvent(
+                                      asset: AssetConstant.dislikeSelectedIcon),
+                                );
+                                isLiked = false;
+                                isdisliked = !isdisliked;
+                              });
+                            },
+                            onShare: () {
+                              Share.share("Conner from Highlite",
+                                  subject: "highlite.app")
+                                  .then((value) {});
+
+                              Future.delayed(const Duration(seconds: 2), () {
+                                centerPrompt.add(
+                                  const ShowPromptEvent(
+                                      asset: AssetConstant.sharedIcon),
+                                );
+                              });
+                            }));
+                  });
+            }
+            return const EmptyFeedPage(
+              profile: "",
+              emptyDesc: "Finding Best Job For You ",
+            );
+          },
+        );
+      },
+    );
+  }
+}
diff --git a/lib/presentation/pages/navigation/home/company/tabs/company_for_you_tab.dart b/lib/presentation/pages/navigation/home/company/tabs/company_for_you_tab.dart
new file mode 100644
index 0000000..c8d1a08
--- /dev/null
+++ b/lib/presentation/pages/navigation/home/company/tabs/company_for_you_tab.dart
@@ -0,0 +1,224 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate/candidate_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/home/candidate/candidate/candidate_state.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/dashboard/company_dashboard.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/dashboard/company_dashboard.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/dashboard/company_dashboard.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/dashboard/company_dashboard.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/dashboard/company_dashboard.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/dashboard/company_dashboard.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/profile/candidate/public_profile/candidate_public_video.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/overlay/bookmark/select_bookmark_overlay.dart';
+import 'package:loading_animation_widget/loading_animation_widget.dart';
+import 'package:share_plus/share_plus.dart';
+
+import '../../../../../../app.dart';
+import '../../../../../../core/resources/asset_constants.dart';
+import '../../../../../../core/resources/color_constants.dart';
+import '../../../../../bloc/center_prompt/center_prompt_builder.dart';
+import '../../../../../bloc/center_prompt/center_prompt_event.dart';
+import '../../../../../bloc/dashboard/auth/authentication_bloc.dart';
+import '../../../../../bloc/dashboard/auth/authentication_state.dart';
+import '../../../../../bloc/dashboard/home/candidate/candidate/candidate_event.dart';
+import '../../../../../bloc/toast/toast_bloc.dart';
+import '../../../../../bloc/toast/toast_event.dart';
+import '../../../../../widgets/empty_feed/empty_feed.dart';
+import '../../../../../widgets/overlay/super_message/super_message_sender.dart';
+import '../../../../../widgets/toaster/toast_alert.dart';
+import '../../../../../widgets/video_feed/video_feed_item.dart';
+
+class CompanyForYouTab extends StatefulWidget with WidgetsBindingObserver {
+  CompanyForYouTab({super.key}) {
+    WidgetsBinding.instance.addObserver(this);
+  }
+
+  @override
+  State<CompanyForYouTab> createState() => _CompanyForYouTabState();
+}
+
+class _CompanyForYouTabState extends State<CompanyForYouTab> {
+  bool isSuperMessaged = false;
+
+  bool isLiked = false;
+
+  bool isdisliked = false;
+
+  @override
+  Widget build(BuildContext context) {
+    return BlocBuilder<AuthenticationBloc, AuthenticationState>(
+      builder: (context, authState) {
+        if (authState.candidate == null) {
+          return Center(
+            child: LoadingAnimationWidget.fourRotatingDots(
+              size: 50,
+              color: ColorConstant.shade00,
+            ),
+          );
+        }
+
+        return BlocBuilder<CandidateBloc, CandidateState>(
+          builder: (context, state) {
+            if (state.controller.isEmpty) {
+              return const EmptyFeedPage(
+                profile: "",
+                emptyDesc: "Finding Best Job For You ",
+              );
+            }
+            if (state.controller.isNotEmpty) {
+              return PageView.builder(
+                  itemCount: state.candidateFeed.length,
+                  scrollDirection: Axis.vertical,
+                  physics: const ClampingScrollPhysics(),
+                  onPageChanged: (page) {
+                    context.read<CandidateBloc>().add(PageChangedEvent(page));
+                  },
+                  itemBuilder: (context, index) {
+                    print(
+                        "The controller in Candidate Tab :: ${state.controller[state.candidateFeed[index].playbackId]}");
+                    return GestureDetector(
+                        child: VideoFeedItem(
+                            controller: state.controller[
+                            state.candidateFeed[index].playbackId]!,
+                            imageProvider: state.thumbnail[
+                            state.candidateFeed[index].playbackId]!,
+                            contents: VideoFeedContents(
+                                title: state.candidateFeed[index].candidateOnBoarding?.position ??
+                                    '',
+                                name: state.candidateFeed[index]
+                                    .candidateOnBoarding?.fullName ?? '',
+                                location: state.candidateFeed[index]
+                                    .candidateOnBoarding?.location ?? '',
+                                salary:
+                                "${state.candidateFeed[index].candidateOnBoarding?.salary}/hr",
+                                jobFlexibility:
+                                state.candidateFeed[index].candidateOnBoarding?.workType ??
+                                    '',
+                                skills: state.candidateFeed[index].candidateOnBoarding?.skills ??
+                                    [],
+                                profile: state.candidateFeed[index].candidateOnBoarding?.profilePicture ??
+                                    ''),
+                            state: VideoFeedContentState(
+                                isFollowing: false,
+                                enabledFollowButton: true,
+                                enabledActionButtons: true,
+                                isSuperMessaged: isSuperMessaged,
+                                isBookmarked: state.bookmarkInfo.where((element) => element.referenceId == state.candidateFeed[index].candidateVideoFeedId).isNotEmpty,
+                                isLiked: isLiked,
+                                isDisliked: isdisliked,
+                                isShared: false),
+                            onTapProfile: () async {
+                              if (state
+                                  .controller[
+                              state.candidateFeed[index].playbackId]!
+                                  .value
+                                  .isPlaying) {
+                                state.controller[
+                                state.candidateFeed[index].playbackId]!
+                                    .pause();
+                              }
+                              globalNavKey.currentState!.push(MaterialPageRoute(
+                                  builder: (_) => CandidatePublicProfile(
+                                    onBack: () {
+                                      state.controller[state
+                                          .candidateFeed[index]
+                                          .playbackId]!
+                                          .play();
+                                    },
+                                    candidateFeed:
+                                    state.candidateFeed[index],
+                                  )));
+                            },
+                            onFollowTap: () {},
+                            onSuperMessageTap: () {
+                              SuperMessageSenderOverlay.showSuperMessage([])
+                                  .then((sendResponse) {
+                                setState(() {
+                                  centerPrompt.add(
+                                    const ShowPromptEvent(
+                                        asset:
+                                        AssetConstant.lightingSelectedIcon),
+                                  );
+                                  isSuperMessaged = !isSuperMessaged;
+                                });
+
+                                toaster.add(
+                                  const ShowToastEvent(
+                                    text:
+                                    "Your super message has been sent successfully.",
+                                    icon: AssetConstant.checkCircleIcon,
+                                    state: ToastState.normal,
+                                    duration: Duration(seconds: 3),
+                                  ),
+                                );
+                              });
+                            },
+                            onBookmarkTap: () async {
+                              if (state.bookmarkInfo
+                                  .where((element) =>
+                              element.referenceId ==
+                                  state.candidateFeed[index]
+                                      .candidateVideoFeedId)
+                                  .isNotEmpty) {} else {
+                                await SelectBookmarkOverlay
+                                    .showBookmarkSelectionByUserId(
+                                    candidateId: state
+                                        .candidateFeed[index].candidateId,
+                                    videoFeedId: state.candidateFeed[index]
+                                        .candidateVideoFeedId,
+                                    context: context).then((value) {
+                                  context.read<CandidateBloc>().add(
+                                      RetrieveBookmark());
+                                  if(value == true){
+                                    centerPrompt.add(
+                                      ShowPromptEvent(
+                                          asset: AssetConstant.bookmarkIconSelectedV2),
+                                    );
+                                  }
+                                });
+                              }
+                            } ,
+                            onLike: () {
+                              setState(() {
+                                centerPrompt.add(
+                                  const ShowPromptEvent(
+                                      asset: AssetConstant.likeSelectedIcon),
+                                );
+                                isLiked = !isLiked;
+                                isdisliked = false;
+                              });
+                            },
+                            onDislike: () {
+                              setState(() {
+                                centerPrompt.add(
+                                  const ShowPromptEvent(
+                                      asset: AssetConstant.dislikeSelectedIcon),
+                                );
+                                isLiked = false;
+                                isdisliked = !isdisliked;
+                              });
+                            },
+                            onShare: () {
+                              Share.share("Conner from Highlite",
+                                  subject: "highlite.app")
+                                  .then((value) {});
+
+                              Future.delayed(const Duration(seconds: 2), () {
+                                centerPrompt.add(
+                                  const ShowPromptEvent(
+                                      asset: AssetConstant.sharedIcon),
+                                );
+                              });
+                            }));
+                  });
+            }
+            return const EmptyFeedPage(
+              profile: "",
+              emptyDesc: "Finding Best Job For You ",
+            );
+          },
+        );
+      },
+    );
+  }
+}
diff --git a/lib/presentation/pages/navigation/home/company/tabs/company_job.dart b/lib/presentation/pages/navigation/home/company/tabs/company_job.dart
new file mode 100644
index 0000000..06f5d1b
--- /dev/null
+++ b/lib/presentation/pages/navigation/home/company/tabs/company_job.dart
@@ -0,0 +1,14 @@
+import 'package:flutter/material.dart';
+class CompanyJob extends StatefulWidget {
+  const CompanyJob({super.key});
+
+  @override
+  State<CompanyJob> createState() => _CompanyJobState();
+}
+
+class _CompanyJobState extends State<CompanyJob> {
+  @override
+  Widget build(BuildContext context) {
+    return const Placeholder();
+  }
+}
diff --git a/lib/presentation/pages/navigation/profile/candidate/edit_profile/edit_candidate_profile.dart b/lib/presentation/pages/navigation/profile/candidate/edit_profile/edit_candidate_profile.dart
index 1fa18e6..6225d14 100644
--- a/lib/presentation/pages/navigation/profile/candidate/edit_profile/edit_candidate_profile.dart
+++ b/lib/presentation/pages/navigation/profile/candidate/edit_profile/edit_candidate_profile.dart
@@ -6,12 +6,12 @@ import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candida
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/profile/candidate/edit_profile/profile_editor_page.dart';
 import '../../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
 import '../../../../../../data/models/apis/dashboard/cadidate/upload/project/candidate_project.dart';
-import '../../../../../widgets/profile/edit_profile/sections/candidate_career_section.dart';
-import '../../../../../widgets/profile/edit_profile/sections/candidate_education_section.dart';
-import '../../../../../widgets/profile/edit_profile/sections/candidate_employment_section.dart';
-import '../../../../../widgets/profile/edit_profile/sections/candidate_personal_section.dart';
-import '../../../../../widgets/profile/edit_profile/sections/candidate_project_section.dart';
-import '../../../../../widgets/profile/edit_profile/sections/candidate_skills_section.dart';
+import '../../../../../widgets/profile/edit_profile/sections/candidate/candidate_career_section.dart';
+import '../../../../../widgets/profile/edit_profile/sections/candidate/candidate_education_section.dart';
+import '../../../../../widgets/profile/edit_profile/sections/candidate/candidate_employment_section.dart';
+import '../../../../../widgets/profile/edit_profile/sections/candidate/candidate_personal_section.dart';
+import '../../../../../widgets/profile/edit_profile/sections/candidate/candidate_project_section.dart';
+import '../../../../../widgets/profile/edit_profile/sections/candidate/candidate_skills_section.dart';
 
 class EditCandidateProfile extends StatelessWidget {
   const EditCandidateProfile({
diff --git a/lib/presentation/pages/navigation/profile/company/company_profile.dart b/lib/presentation/pages/navigation/profile/company/company_profile.dart
index 2a3a54d..90bcd85 100644
--- a/lib/presentation/pages/navigation/profile/company/company_profile.dart
+++ b/lib/presentation/pages/navigation/profile/company/company_profile.dart
@@ -1,374 +1,87 @@
-// import 'package:flutter/material.dart';
-// import 'package:flutter_bloc/flutter_bloc.dart';
-// import 'package:highlite_flutter_mvp/core/resources/color_constants.dart';
-// import 'package:highlite_flutter_mvp/data/models/apis/dashboard/company/upload/company_job_post.dart';
-// import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
-// import 'package:highlite_flutter_mvp/domain/repositories/auth/auth_repository.dart';
-// import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_bloc.dart';
-// import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_state.dart';
-// import 'package:highlite_flutter_mvp/presentation/widgets/utils/context.dart';
-//
-// import '../../../../../core/constants/mocked_image.dart';
-// import '../../../../../core/resources/l10n/translation_key.dart';
-// import '../../../../../domain/repositories/dashboard/common/feed_service/home_feed_state_repository.dart';
-// import '../../../../bloc/dashboard/profile/company/public_profile/public_company_profile_bloc.dart';
-// import '../../../../bloc/dashboard/profile/company/public_profile/public_company_profile_builder.dart';
-// import '../../../../bloc/dashboard/profile/company/public_profile/public_company_profile_event.dart';
-// import '../../../../widgets/gallery/generic_grid.dart';
-// import '../../../../widgets/modal/multiple_selection_modal.dart';
-// import '../../../../widgets/navigation/base_navigator.dart';
-// import '../../../../widgets/overlay/super_message/super_message_sender.dart';
-// import '../../../../widgets/profile/job_post_tile.dart';
-// import '../../../../widgets/profile/profile_section_spacer.dart';
-// import '../../../../widgets/profile/sections/company/sections/company_about_section.dart';
-// import '../../../../widgets/profile/sections/company/sections/company_general_section.dart';
-// import '../../../../widgets/profile/sections/company/sections/company_header_section.dart';
-// import '../appbar/profile_appbar.dart';
-// import '../default/profile_hero_section.dart';
-//
-// class CompanyProfile extends StatefulWidget {
-//   static const previewRoute = '/company-profile';
-//   static const routeName = 'company-profile';
-//   final CompanyOnboarding companyProfile;
-//   final List<CompanyJobPost> jobPosts;
-//   final bool isPreview;
-//   const CompanyProfile({
-//     super.key,
-//     required this.isPreview,
-//     required this.companyProfile,
-//     required this.jobPosts,
-//   });
-//
-//   @override
-//   State<CompanyProfile> createState() => _CompanyProfileState();
-// }
-//
-// class _CompanyProfileState extends State<CompanyProfile> {
-//   @override
-//   Widget build(BuildContext context) {
-//     return PublicCompanyProfileProviderWidget(
-//       companyProfile: widget.companyProfile,
-//       child: PublicCompanyProfileBuilderWidget(builder: (context, state) {
-//         return
-//           BaseNavigator(
-//           builder: (navKey) => Scaffold(
-//             appBar: ProfileAppBar(
-//               username: widget.companyProfile.userName,
-//               navigator:
-//               widget.isPreview ? context.navigator : navKey.currentState!,
-//               isPreview: widget.isPreview,
-//               selectedProfileId: widget.companyProfile.companyId,
-//             ),
-//             backgroundColor: ColorConstant.shade00,
-//             body: CustomScrollView(
-//               slivers: [
-//                 CompanyProfileHeaderSection(
-//                   profilePhoto: MockedImage.mockedCompanyImageFromS3,
-//                   organization: widget.companyProfile.companyName,
-//                   industry: widget.companyProfile.industry,
-//                   city: widget.companyProfile.location,
-//                   country: widget.companyProfile.location,
-//                 ),
-//                 BlocBuilder<AuthenticationBloc , AuthenticationState>(
-//                   builder: (context, authState) =>
-//                       PublicCompanyProfileBuilderWidget(
-//                         builder: (context, state) => ProfileHeroSection(
-//                           isPreview: widget.isPreview,
-//                           onEdit: () {
-//                             // navKey.currentState!
-//                             //     .push(
-//                             //   MaterialPageRoute(
-//                             //     builder: (_) => const EditCompanyProfile(),
-//                             //   ),
-//                             // )
-//                             //     .then((_) {
-//                             //   setState(() {
-//                             //     // context.read<PublicCompanyProfileBloc>().add(const ReloadPublicCompanyProfileEvent());
-//                             //   });
-//                             // });
-//                           },
-//                           followers: "${state.followers.length}",
-//                           // following: "${state.following.length}",
-//                           following: "${state.followingCount}",
-//                           isFollowing: state.followers
-//                               .where((follower) => follower == authState.id)
-//                               .isNotEmpty,
-//                           onFollow: state.isLoading ||
-//                               authService.getUserID() ==
-//                                   widget.companyProfile.id
-//                               ? null
-//                               : () {
-//                             if (state.followers
-//                                 .where((follower) => follower == authState.id)
-//                                 .isNotEmpty) {
-//                               context.read<PublicCompanyProfileBloc>().add(
-//                                   const UnfollowPublicCompanyProfileEvent());
-//                             } else {
-//                               context.read<PublicCompanyProfileBloc>().add(
-//                                   const FollowPublicCompanyProfileEvent());
-//                             }
-//                           },
-//                           onTapSuperMessage: authService.getUserID() ==
-//                               widget.companyProfile.id
-//                               ? null
-//                               : () {
-//                             SuperMessageSenderOverlay.showSuperMessage(state
-//                                 .jobPosts
-//                                 .map(
-//                                   (e) =>
-//                                   IDValue(id: e.id, value: e.title),
-//                             )
-//                                 .toList())
-//                                 .then(
-//                                   (sendResponse) {
-//                                 if (sendResponse != null &&
-//                                     sendResponse.idValue != null) {
-//                                   context
-//                                       .read<PublicCompanyProfileBloc>()
-//                                       .add(
-//                                     SuperMessageEvent(
-//                                       jobPostId: sendResponse.idValue!.id,
-//                                       message: sendResponse.message,
-//                                       companyId: widget.companyProfile.id,
-//                                     ),
-//                                   );
-//                                 }
-//                               },
-//                             );
-//                           },
-//                         ),
-//                       ),
-//                 ),
-//                 if (widget.companyProfile.aboutCompany != "")
-//                   CompanyAboutSection(
-//                     aboutMe: widget.companyProfile.aboutCompany,
-//                   ),
-//                 CompanyGeneralSection(
-//                   companyWebsite: widget.companyProfile.website,
-//                   lookingToHire: widget.companyProfile.lookingToHire,
-//                 ),
-//                 ProfileSectionSpacer(
-//                   height: widget.jobPosts.isEmpty ? 0 : 12,
-//                   onEdit: null,
-//                   header: TranslationKeys.ourJobs,
-//                 ),
-//                 PublicCompanyProfileBuilderWidget(
-//                   builder: (context, state) => CompanyJobSection(
-//                     items: state.jobFeeds,
-//                     postItems: state.jobPosts,
-//                     isPreview: widget.isPreview,
-//                   ),
-//                 ),
-//                 const ProfileSectionSpacer(height: 40),
-//               ],
-//             ),
-//           ),
-//         );
-//       }),
-//     );
-//   }
-// }
-//
-// class ComprofileOnlyUI extends StatefulWidget {
-//   final CompanyOnboarding companyProfile;
-//   final List<CompanyJobPost> jobPosts;
-//   final bool isPreview;
-//   const ComprofileOnlyUI({
-//     required this.isPreview,
-//     required this.companyProfile,
-//     required this.jobPosts,
-//     super.key});
-//
-//   @override
-//   State<ComprofileOnlyUI> createState() => _ComprofileOnlyUIState();
-// }
-//
-// class _ComprofileOnlyUIState extends State<ComprofileOnlyUI> {
-//   @override
-//   Widget build(BuildContext context) {
-//     return   BaseNavigator(
-//       builder: (navKey) => Scaffold(
-//         appBar: ProfileAppBar(
-//           username: widget.companyProfile.username,
-//           navigator:
-//           widget.isPreview ? context.navigator : navKey.currentState!,
-//           isPreview: widget.isPreview,
-//           selectedProfileId: widget.companyProfile.id,
-//         ),
-//         backgroundColor: ColorConstant.shade00,
-//         body: CustomScrollView(
-//           slivers: [
-//             CompanyProfileHeaderSection(
-//               profilePhoto: widget.companyProfile.companyLogo ??
-//                   MockedImage.mockedCompanyImageFromS3,
-//               organization: widget.companyProfile.companyName,
-//               industry: widget.companyProfile.industry,
-//               city: widget.companyProfile.city,
-//               country: widget.companyProfile.country,
-//             ),
-//             BlocBuilder<AuthenticationBloc , AuthenticationState>(
-//               builder: (context, authState) =>
-//                   PublicCompanyProfileBuilderWidget(
-//                     builder: (context, state) => ProfileHeroSection(
-//                       isPreview: widget.isPreview,
-//                       onEdit: () {
-//                         // navKey.currentState!
-//                         //     .push(
-//                         //   MaterialPageRoute(
-//                         //     builder: (_) => const EditCompanyProfile(),
-//                         //   ),
-//                         // )
-//                         //     .then((_) {
-//                         //   setState(() {
-//                         //     // context.read<PublicCompanyProfileBloc>().add(const ReloadPublicCompanyProfileEvent());
-//                         //   });
-//                         // });
-//                       },
-//                       followers: "${state.followers.length}",
-//                       // following: "${state.following.length}",
-//                       following: "${state.followingCount}",
-//                       isFollowing: state.followers
-//                           .where((follower) => follower == authState.id)
-//                           .isNotEmpty,
-//                       onFollow: state.isLoading ||
-//                           authService.getUserID() ==
-//                               widget.companyProfile.id
-//                           ? null
-//                           : () {
-//                         if (state.followers
-//                             .where((follower) => follower == authState.id)
-//                             .isNotEmpty) {
-//                           context.read<PublicCompanyProfileBloc>().add(
-//                               const UnfollowPublicCompanyProfileEvent());
-//                         } else {
-//                           context.read<PublicCompanyProfileBloc>().add(
-//                               const FollowPublicCompanyProfileEvent());
-//                         }
-//                       },
-//                       onTapSuperMessage: authService.getUserID() ==
-//                           widget.companyProfile.id
-//                           ? null
-//                           : () {
-//                         SuperMessageSenderOverlay.showSuperMessage(state
-//                             .jobPosts
-//                             .map(
-//                               (e) =>
-//                               IDValue(id: e.id, value: e.title),
-//                         )
-//                             .toList())
-//                             .then(
-//                               (sendResponse) {
-//                             if (sendResponse != null &&
-//                                 sendResponse.idValue != null) {
-//                               context
-//                                   .read<PublicCompanyProfileBloc>()
-//                                   .add(
-//                                 SuperMessageEvent(
-//                                   jobPostId: sendResponse.idValue!.id,
-//                                   message: sendResponse.message,
-//                                   companyId: widget.companyProfile.id,
-//                                 ),
-//                               );
-//                             }
-//                           },
-//                         );
-//                       },
-//                     ),
-//                   ),
-//             ),
-//             if (widget.companyProfile.aboutCompany != "")
-//               CompanyAboutSection(
-//                 aboutMe: widget.companyProfile.aboutCompany,
-//               ),
-//             CompanyGeneralSection(
-//               companyWebsite: widget.companyProfile.website,
-//               lookingToHire: widget.companyProfile.lookingToHire,
-//             ),
-//             ProfileSectionSpacer(
-//               height: widget.jobPosts.isEmpty ? 0 : 12,
-//               onEdit: null,
-//               header: TranslationKeys.ourJobs,
-//             ),
-//             PublicCompanyProfileBuilderWidget(
-//               builder: (context, state) => CompanyJobSection(
-//                 items: state.jobFeeds,
-//                 postItems: state.jobPosts,
-//                 isPreview: widget.isPreview,
-//               ),
-//             ),
-//             const ProfileSectionSpacer(height: 40),
-//           ],
-//         ),
-//       ),
-//     );;
-//   }
-// }
-//
-//
-//
-// class CompanyJobSection extends StatefulWidget {
-//   final List<HighliteCompanyJobFeed> items;
-//   final List<HighliteCompanyJobPost> postItems;
-//   final bool isPreview;
-//   const CompanyJobSection({
-//     super.key,
-//     required this.items,
-//     required this.postItems,
-//     required this.isPreview,
-//   });
-//
-//   @override
-//   State<CompanyJobSection> createState() => _CompanyJobSectionState();
-// }
-//
-// class _CompanyJobSectionState extends State<CompanyJobSection> {
-//   @override
-//   Widget build(BuildContext context) {
-//     if (widget.items.isEmpty) {
-//       return const ProfileSectionSpacer(
-//         height: 0,
-//         onEdit: null,
-//         header: "This company currently has no job posted.",
-//       );
-//     }
-//     if (widget.isPreview) {
-//       return GenericGrid(
-//         isAddEnabled: false,
-//         perColumn: 2,
-//         horizontalPadding: 16.0,
-//         maxHeight: 240,
-//         items: widget.items,
-//         itemBuilder: (context, item, index) => JobPostTile(
-//           jobFeed: item,
-//           isFromOwnProfile: !widget.isPreview,
-//         ),
-//       );
-//     } else {
-//       return ValueListenableBuilder(
-//         valueListenable: homeFeedState.jobPosts,
-//         builder: (context, value, child) {
-//           return GenericGrid(
-//             isAddEnabled: false,
-//             perColumn: 2,
-//             horizontalPadding: 16.0,
-//             maxHeight: 240,
-//             // items: widget.postItems,
-//             items: value.where((e) => e.jobVideoFeedID != "").toList(),
-//             itemBuilder: (context, item, index) => JobPostTile(
-//               jobPost: item,
-//               isFromOwnProfile: true,
-//             ),
-//           );
-//         },
-//       );
-//     }
-//   }
-//
-//   @override
-//   void didUpdateWidget(CompanyJobSection oldWidget) {
-//     super.didUpdateWidget(oldWidget);
-//     if (widget.items != oldWidget.items) {
-//       // context.read<PublicCompanyProfileBloc>().add(const ReloadPublicCompanyProfileEvent());
-//     }
-//   }
-// }
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/core/resources/color_constants.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/dashboard/company/upload/company_job_post.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/domain/repositories/auth/auth_repository.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_state.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/profile/company/edit_profile/edit_company_profile.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/profile/sections/company/sections/company_tab_section.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/utils/context.dart';
+
+import '../../../../../core/constants/mocked_image.dart';
+import '../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../domain/repositories/dashboard/common/feed_service/home_feed_state_repository.dart';
+import '../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../bloc/dashboard/profile/company/public_profile/public_company_profile_bloc.dart';
+import '../../../../bloc/dashboard/profile/company/public_profile/public_company_profile_builder.dart';
+import '../../../../bloc/dashboard/profile/company/public_profile/public_company_profile_event.dart';
+import '../../../../widgets/gallery/generic_grid.dart';
+import '../../../../widgets/modal/multiple_selection_modal.dart';
+import '../../../../widgets/navigation/base_navigator.dart';
+import '../../../../widgets/overlay/super_message/super_message_sender.dart';
+import '../../../../widgets/profile/job_post_tile.dart';
+import '../../../../widgets/profile/profile_section_spacer.dart';
+import '../../../../widgets/profile/sections/company/sections/company_about_section.dart';
+import '../../../../widgets/profile/sections/company/sections/company_general_section.dart';
+import '../../../../widgets/profile/sections/company/sections/company_header_section.dart';
+import '../../../../widgets/profile/sections/company/sections/company_header_section_V2.dart';
+import '../appbar/profile_appbar.dart';
+import '../default/profile_hero_section.dart';
+
+class CompanyProfile extends StatelessWidget {
+  final CompanyOnboarding companyProfile;
+  final List<CompanyJobPost> jobPosts;
+
+  const CompanyProfile({
+    super.key,
+    required this.companyProfile,
+    required this.jobPosts,
+  });
+
+  @override
+  Widget build(BuildContext context) {
+    return BaseNavigator(
+      builder: (navKey) => DefaultTabController(
+        length: 3,
+        child: Scaffold(
+          appBar: ProfileAppBar(
+            title: companyProfile.companyName,
+            username: companyProfile.userName,
+            navigator: context.navigator,
+            isPreview: false,
+            selectedProfileId: companyProfile.companyId,
+          ),
+          backgroundColor: ColorConstant.shade00,
+          body: NestedScrollView(
+            headerSliverBuilder:
+                (BuildContext context, bool innerBoxIsScrolled) {
+              return [
+                SliverToBoxAdapter(
+                  child: CompanyHeaderSectionV2(
+                    onChangeProfilePicture: (){
+                      context.read<CompanyEditorBloc>().add(ChangeCompanyProfilePictureEvent()) ;
+                    },
+                    companyLogo: companyProfile.companyLogo,
+                    about: companyProfile.about,
+                    followingCount: "0",
+                    onTapEditProfile: () {
+                      navKey.currentState?.push(MaterialPageRoute(builder: (_)=> EditCompanyProfile())) ;
+                    },
+                    followersCount: '0',
+                    likeCount: '0',
+                    location:
+                        "${companyProfile.city} ${companyProfile.country}",
+                  ),
+                ),
+              ];
+            },
+            body: const CompanyTabSection(),
+          ),
+        ),
+      ),
+    );
+  }
+}
diff --git a/lib/presentation/pages/navigation/profile/company/edit_profile/edit_company_profile.dart b/lib/presentation/pages/navigation/profile/company/edit_profile/edit_company_profile.dart
new file mode 100644
index 0000000..e53a8a4
--- /dev/null
+++ b/lib/presentation/pages/navigation/profile/company/edit_profile/edit_company_profile.dart
@@ -0,0 +1,33 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_state.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/profile/candidate/edit_profile/profile_editor_page.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/profile/edit_profile/sections/company/company_info_section.dart';
+class EditCompanyProfile extends StatelessWidget {
+  const EditCompanyProfile({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return BlocBuilder<CompanyEditorBloc , CompanyEditorState>(
+      builder: (context , state) {
+
+        final companyProfile = state.companyProfile ;
+        return ProfileEditorPage(children: [
+
+          CompanyInfoSection(
+              username: companyProfile.userName,
+              companyName: companyProfile.companyName,
+              industry: companyProfile.industry,
+              companySize:companyProfile.companySize ,
+              website: companyProfile.website,
+              location: companyProfile.location,
+              aboutCompany: companyProfile.about,
+              benefits: companyProfile.benefits,
+          )
+
+        ]);
+      }
+    );
+  }
+}
diff --git a/lib/presentation/pages/navigation/profile/company/self_company_profile.dart b/lib/presentation/pages/navigation/profile/company/self_company_profile.dart
new file mode 100644
index 0000000..eda8136
--- /dev/null
+++ b/lib/presentation/pages/navigation/profile/company/self_company_profile.dart
@@ -0,0 +1,32 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/auth/authentication_state.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_state.dart';
+
+import 'company_profile.dart';
+
+class SelfCompanyProfile extends StatelessWidget {
+  const SelfCompanyProfile({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return BlocBuilder<AuthenticationBloc, AuthenticationState>(
+        builder: (context, authState) {
+      return BlocProvider<CompanyEditorBloc>(
+        create: (_) => CompanyEditorBloc(
+          companyOnboarding: authState.companyProfile ?? CompanyOnboarding.getDefault(),
+          companyJobPosts: [],
+          companyJobPostVideoFeed: [],
+        ),
+        child: BlocBuilder<CompanyEditorBloc, CompanyEditorState>(
+            builder: (context, state) {
+          return CompanyProfile(
+              companyProfile: state.companyProfile, jobPosts: []);
+        }),
+      );
+    });
+  }
+}
diff --git a/lib/presentation/pages/navigation/upload /candidate/upload_candidate.dart b/lib/presentation/pages/navigation/upload /candidate/upload_candidate.dart
index 7abd11f..3dfa59f 100644
--- a/lib/presentation/pages/navigation/upload /candidate/upload_candidate.dart	
+++ b/lib/presentation/pages/navigation/upload /candidate/upload_candidate.dart	
@@ -7,7 +7,6 @@ import 'package:highlite_flutter_mvp/core/resources/asset_constants.dart';
 import 'package:highlite_flutter_mvp/core/resources/color_constants.dart';
 import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
 import 'package:highlite_flutter_mvp/core/resources/typography_theme.dart';
-import 'package:highlite_flutter_mvp/core/services/push_notification_service.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_event.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/upload/candidate/video/upload_candidate_state.dart';
diff --git a/lib/presentation/pages/navigation/upload /company/upload_company.dart b/lib/presentation/pages/navigation/upload /company/upload_company.dart
index 0d3f0af..d2cf659 100644
--- a/lib/presentation/pages/navigation/upload /company/upload_company.dart	
+++ b/lib/presentation/pages/navigation/upload /company/upload_company.dart	
@@ -2,6 +2,7 @@ import 'dart:io';
 
 import 'package:flutter/material.dart';
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/upload%20/candidate/resume%20/upload%20_resume.dart';
+import 'package:highlite_flutter_mvp/presentation/pages/navigation/upload%20/candidate/upload_candidate.dart';
 import 'package:highlite_flutter_mvp/presentation/pages/navigation/upload%20/company/upload%20information/upload_information.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/dialogs/upload_dialog.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/navigation/base_navigator.dart';
@@ -32,7 +33,7 @@ class UploadCompany extends StatefulWidget {
 }
 
 class _UploadCompanyState extends State<UploadCompany> {
-  bool isVideo = false;
+  bool isVideo = true;
   FileModel? pickVideo;
   String thumbnailUrl = '';
   final TextEditingController _descriptionController = TextEditingController();
@@ -47,7 +48,6 @@ class _UploadCompanyState extends State<UploadCompany> {
 
   List<String> tools = [];
   List<String> skills = [];
-  String salary = '';
 
   @override
   Widget build(BuildContext context) {
@@ -58,9 +58,8 @@ class _UploadCompanyState extends State<UploadCompany> {
     // });
     return BaseNavigator(
       builder: (navKey) => Scaffold(
-        backgroundColor: isVideo ? Colors.white : Colors.black,
-        appBar: isVideo
-            ? AppBar(
+        backgroundColor:  Colors.white ,
+        appBar: AppBar(
                 title: Text(
                   'New Job Post',
                   style: BaseTextStyle(
@@ -68,8 +67,7 @@ class _UploadCompanyState extends State<UploadCompany> {
                       fontSize: TypographyTheme.paragraph_p3),
                 ),
                 centerTitle: true,
-              )
-            : AppBar(backgroundColor: isVideo ? Colors.white : Colors.black),
+              ),
         body:
         Center(
           child: SingleChildScrollView(
@@ -127,17 +125,25 @@ class _UploadCompanyState extends State<UploadCompany> {
                                    fit: BoxFit.cover,
                                  ),
                                )
-                                   : Container(
-                                 width: 125,
-                                 height: 150,
-                                 decoration: BoxDecoration(
-                                     color: Colors.grey[300],
-                                   borderRadius:  BorderRadius.circular(6)
-                                 ),
-
-                                 child: const Center(
-                                     child: Text('Edit cover')),
-                               ),
+                                   :
+                               UploadVideo(text: "Upload Video", onTap: () async{
+                                 FileModel? saveVideo = await FileManager()
+                                     .pickVideoWithModel(ImageSource.camera);
+                                 if (saveVideo != null && saveVideo.file != null) {
+                                   if (context.mounted) {
+                                     setState(() {
+                                       pickVideo = saveVideo;
+                                     });
+                                     String generatedThumbnail =
+                                         await ThumbnailGenerator()
+                                         .generateThumbnail(pickVideo!.file!);
+                                     setState(() {
+                                       thumbnailUrl = generatedThumbnail;
+                                     });
+                                     debugPrint("Thumbnail URL is $thumbnailUrl");
+                                   }
+                                 }
+                               })
                                // Positioned(
                                //   bottom: 8,
                                //   right: 25,
diff --git a/lib/presentation/widgets/dashboard/dashboard_tabs.dart b/lib/presentation/widgets/dashboard/dashboard_tabs.dart
index 4f42bba..b7c1353 100644
--- a/lib/presentation/widgets/dashboard/dashboard_tabs.dart
+++ b/lib/presentation/widgets/dashboard/dashboard_tabs.dart
@@ -18,13 +18,15 @@ import '../svg/svg_asset.dart';
 
 class DashboardTab {
   final Widget widget;
-  final String title;
+  final String? title;
+  final String? tag ;
   final String? icon;
   final String? selectedIcon;
   final bool isHighliteLogo ;
   const DashboardTab({
     required this.widget,
-    required this.title,
+     this.title,
+    this.tag ,
     this.icon,
     this.isHighliteLogo = false ,
     this.selectedIcon,
@@ -85,18 +87,19 @@ class DashboardTabs extends StatelessWidget {
             ),
             onTap: onSelectPage,
             tabs: tabs.mapIndexed((tab, index) {
-              if (tab.title == "Profile") {
+              if (tab.tag == "Profile") {
                 return BlocBuilder<AuthenticationBloc , AuthenticationState>(
-                  builder: (context, authState) => ProfileTabItem(
-                    isSelected: selectedIndex == index,
-                    onDarkSurface: onDarkTabs,
-                    title: tab.title.toString(),
-                    profile: authState.userType == UserTypes.candidate
-                        ?  ""
-                        // TODO : NEED TO ADD PROFILE PICTURE WHEN I UPDATE BACKEND CANDIDATE DETAILS API
-                       // ? (authState.candidate?.profilePhoto ?? "")
-                      //  : (authState.companyProfile?.companyLogo ?? ""),
-                        :  "",
+                  builder: (context, authState) => Padding(
+                    padding: const EdgeInsets.only(bottom: 12.0),
+                    child: ProfileTabItem(
+                      isSelected: selectedIndex == index,
+                      onDarkSurface: onDarkTabs,
+                      title: tab.title ?? '',
+                      profile: authState.userType == UserTypes.candidate
+                          ? (authState.candidate?.profilePicture ?? "")
+                          : (authState.companyProfile?.companyLogo ?? ""),
+
+                    ),
                   ),
                 );
               }
@@ -106,12 +109,11 @@ class DashboardTabs extends StatelessWidget {
                   child: TabItem(
                     asset: tab.icon.toString(),
                     selectedAsset: tab.selectedIcon.toString(),
-                    title: tab.title.toString(),
+                    title: tab.title,
                     isHighliteIcon: tab.isHighliteLogo ,
                     isSelected: selectedIndex == index ,
                     onDarkSurface: onDarkTabs,
                     child: selectedIndex == index ? const AnimatedLogo():  Image.asset(
-
                          AssetConstant.icHighLiteSMLogoSmallPng
 
                     ),
@@ -123,7 +125,7 @@ class DashboardTabs extends StatelessWidget {
                 child: TabItem(
                   asset: tab.icon.toString(),
                   selectedAsset: tab.selectedIcon.toString(),
-                  title: tab.title.toString(),
+                  title: tab.title ,
                   isHighliteIcon: tab.isHighliteLogo ,
                   isSelected: selectedIndex == index,
                   onDarkSurface: onDarkTabs,
@@ -161,11 +163,11 @@ class TabItem extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
     return child != null ? child! :Tab(
+       text: title ?? '',
       icon: SvgAsset(
         asset: isSelected ? selectedAsset : asset,
         color:  onDarkSurface ? isSelected ? ColorConstant.shade00: ColorConstant.neutral400 : ColorConstant.neutral800,
       ),
-      text: title,
     );
   }
 }
@@ -175,7 +177,7 @@ class ProfileTabItem extends StatelessWidget {
   final bool isSelected;
   final bool onDarkSurface;
   final String profile;
-  const ProfileTabItem({
+  const   ProfileTabItem({
     super.key,
     required this.title,
     required this.isSelected,
diff --git a/lib/presentation/widgets/onboarding/onboarding_success.dart b/lib/presentation/widgets/onboarding/onboarding_success.dart
index c42e0fd..6208054 100644
--- a/lib/presentation/widgets/onboarding/onboarding_success.dart
+++ b/lib/presentation/widgets/onboarding/onboarding_success.dart
@@ -59,7 +59,7 @@ class OnboardingSuccessView extends StatelessWidget {
                 Padding(
                   padding: const EdgeInsets.symmetric(horizontal: 16.0),
                   child: Text(
-                   "Welcome ${CandidateTags.firstName}!",
+                   "Welcome $name!",
                     textAlign: TextAlign.center,
                     style:  BaseTextStyle(
                       fontSize: TypographyTheme.heading_H5,
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_about.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_about.dart
similarity index 74%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_about.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_about.dart
index 3550268..53808af 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_about.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_about.dart
@@ -1,13 +1,13 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:form_validator/form_validator.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../chat/chat_responder.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_field.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
 
 class EditProfileByCandidateAbout extends EditorFormModel<CandidateOnBoarding> {
   EditProfileByCandidateAbout(
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_hourly_rate.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_hourly_rate.dart
similarity index 80%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_hourly_rate.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_hourly_rate.dart
index 99a95e3..75ca8a3 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_hourly_rate.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_hourly_rate.dart
@@ -3,12 +3,12 @@ import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:form_validator/form_validator.dart';
 import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../chat/chat_responder.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_field.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
 
 class EditProfileByCandidateHourlyRate
     extends EditorFormModel<CandidateOnBoarding> {
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_duration.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_duration.dart
similarity index 67%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_duration.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_duration.dart
index f1c81a9..cf52ba3 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_duration.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_duration.dart
@@ -1,13 +1,13 @@
 import 'package:flutter_bloc/flutter_bloc.dart';
-import '../../../../../core/constants/profile_options.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../form/radio_group.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_item.dart';
 
+import '../../../../../../core/constants/profile_options.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../form/radio_group.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_item.dart';
 class EditProfileByCandidateJobDuration
     extends EditorFormModel<CandidateOnBoarding> {
   EditProfileByCandidateJobDuration(String jobDuration)
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_flexibility.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_flexibility.dart
similarity index 67%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_flexibility.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_flexibility.dart
index 4a3af77..3a12a31 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_flexibility.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_flexibility.dart
@@ -1,12 +1,12 @@
 import 'package:flutter_bloc/flutter_bloc.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../../core/constants/profile_options.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../form/radio_group.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_item.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../../core/constants/profile_options.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../form/radio_group.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_item.dart';
 
 class EditProfileByCandidateJobFlexibility
     extends EditorFormModel<CandidateOnBoarding> {
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_status.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_status.dart
similarity index 100%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_job_status.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_job_status.dart
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_location.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_location.dart
similarity index 83%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_location.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_location.dart
index 4f4e50f..372946b 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_location.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_location.dart
@@ -1,15 +1,15 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:form_validator/form_validator.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../core/services/location_service.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../buttons/primary_button.dart';
-import '../../../chat/chat_responder.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_field.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../core/services/location_service.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../buttons/primary_button.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
 
 class EditProfileByCandidateLocation
     extends EditorFormModel<CandidateOnBoarding> {
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_name.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_name.dart
similarity index 82%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_name.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_name.dart
index 1a4bf87..4c75f4c 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_name.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_name.dart
@@ -1,13 +1,13 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:form_validator/form_validator.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../chat/chat_responder.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_field.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
 
 class EditProfileByCandidateName extends EditorFormModel<CandidateOnBoarding> {
   EditProfileByCandidateName(
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_skills.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_skills.dart
similarity index 69%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_skills.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_skills.dart
index 9c1b5ce..38dce1a 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_skills.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_skills.dart
@@ -1,12 +1,12 @@
 import 'package:flutter_bloc/flutter_bloc.dart';
 
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../form/tags_selection.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_item.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../form/tags_selection.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_item.dart';
 
 class EditProfileByCandidateSkills
     extends EditorFormModel<CandidateOnBoarding> {
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_title.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_title.dart
similarity index 74%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_title.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_title.dart
index de24883..b2f5070 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_title.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_title.dart
@@ -1,13 +1,13 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:form_validator/form_validator.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../chat/chat_responder.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_field.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
 
 class EditProfileByCandidateTitle extends EditorFormModel<CandidateOnBoarding> {
   EditProfileByCandidateTitle(
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_tools.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_tools.dart
similarity index 69%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_tools.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_tools.dart
index a7f9a62..10eb1c4 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_tools.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_tools.dart
@@ -1,11 +1,11 @@
 import 'package:flutter_bloc/flutter_bloc.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../form/tags_selection.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_item.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../form/tags_selection.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_item.dart';
 
 class EditProfileByCandidateTools extends EditorFormModel<CandidateOnBoarding> {
   EditProfileByCandidateTools(List<String> tools)
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_username.dart b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_username.dart
similarity index 76%
rename from lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_username.dart
rename to lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_username.dart
index c8afff6..c62c3e1 100644
--- a/lib/presentation/widgets/profile/edit_profile/flows/edit_profile_by_candidate_username.dart
+++ b/lib/presentation/widgets/profile/edit_profile/flows/candidate/edit_profile_by_candidate_username.dart
@@ -1,13 +1,13 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:form_validator/form_validator.dart';
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
-import '../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
-import '../../../chat/chat_responder.dart';
-import '../form/profile_editor_form.dart';
-import '../form/profile_editor_form_field.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/candidate/candidate_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
 
 class EditProfileByCandidateUsername
     extends EditorFormModel<CandidateOnBoarding> {
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_about.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_about.dart
new file mode 100644
index 0000000..ae04032
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_about.dart
@@ -0,0 +1,44 @@
+import 'package:flutter/material.dart';
+import 'package:form_validator/form_validator.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:provider/provider.dart';
+
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
+
+class EditCompanyProfileAbout extends EditorFormModel<CompanyOnboarding> {
+  EditCompanyProfileAbout(
+    TextEditingController aboutController,
+  ) : super(
+          title: TranslationKeys.editAbout,
+          children: (company, formState, setState) => [
+            ProfileEditorFormField(
+              label: TranslationKeys.editAbout,
+              formState: formState,
+              placeholderText: TranslationKeys.about,
+              height: MinMax(0, 150),
+              textController: aboutController,
+              characterLimit: MinMax(0, 150),
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.about ?? '',
+              validator: ValidationBuilder(
+                      requiredMessage: "Please add a valid about.")
+                  .build(),
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      about: aboutController.text,
+                    ),
+                  ),
+                );
+          },
+          validated: () => true,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_benefits.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_benefits.dart
new file mode 100644
index 0000000..1661e96
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_benefits.dart
@@ -0,0 +1,42 @@
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/profile/edit_profile/form/profile_editor_form_item.dart';
+import 'package:provider/provider.dart';
+
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../form/tags_selection.dart';
+import '../../form/profile_editor_form.dart';
+
+class EditCompanyProfileBenefits extends EditorFormModel<CompanyOnboarding> {
+  EditCompanyProfileBenefits({required List<String> companyBenefits})
+      : super(
+          title: TranslationKeys.editCompanyBenefits,
+          children: (company, formState, setState) => [
+            ProfileEditorFormItem(
+              label: TranslationKeys.companyBenefits,
+              padded: false,
+              children: TagsSelection(
+                title: TranslationKeys.benefits,
+                selection: companyBenefits,
+                onSelect: (selectedSkills) {
+                  setState(() {
+                    companyBenefits = selectedSkills;
+                  });
+                },
+                maxCount: 3,
+              ),
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      benefits: companyBenefits,
+                    ),
+                  ),
+                );
+          },
+          validated: () => true,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companySize.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companySize.dart
new file mode 100644
index 0000000..37efe61
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companySize.dart
@@ -0,0 +1,44 @@
+import 'package:flutter/material.dart';
+import 'package:form_validator/form_validator.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:provider/provider.dart';
+
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
+
+class EditCompanyProfileCompanySize extends EditorFormModel<CompanyOnboarding> {
+  EditCompanyProfileCompanySize(
+    TextEditingController companyTypeController,
+  ) : super(
+          title: TranslationKeys.editCompanySize,
+          children: (company, formState, setState) => [
+            ProfileEditorFormField(
+              label: TranslationKeys.companySize,
+              formState: formState,
+              placeholderText: TranslationKeys.companySize,
+              height: MinMax(50, 50),
+              textController: companyTypeController,
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.companySize,
+              validator: ValidationBuilder(
+                      requiredMessage: "Please add a valid company type.")
+                  .required()
+                  .build(),
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      companySize: companyTypeController.text,
+                    ),
+                  ),
+                );
+          },
+          validated: () => companyTypeController.text.isNotEmpty,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companyname.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companyname.dart
new file mode 100644
index 0000000..a440e14
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companyname.dart
@@ -0,0 +1,47 @@
+import 'package:flutter/material.dart';
+import 'package:form_validator/form_validator.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:provider/provider.dart';
+
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
+
+class EditCompanyProfileCompanyName
+    extends EditorFormModel<CompanyOnboarding> {
+  EditCompanyProfileCompanyName(
+    TextEditingController companyNameController,
+  ) : super(
+          title: TranslationKeys.editCompanyName,
+          children: (company, formState, setState) => [
+            ProfileEditorFormField(
+              label: TranslationKeys.companyName,
+              formState: formState,
+              placeholderText: TranslationKeys.companyName,
+              height: MinMax(50, 50),
+              textController: companyNameController,
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.companyName,
+              validator: ValidationBuilder(
+                      requiredMessage: "Please add a valid company name.")
+                  .required()
+                  .build(),
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      companyName: companyNameController.text,
+                    ),
+                  ),
+                );
+          },
+          validated: () => companyNameController.text.isNotEmpty,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_location.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_location.dart
new file mode 100644
index 0000000..06721b8
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_location.dart
@@ -0,0 +1,83 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:form_validator/form_validator.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import '../../../../../../core/services/location_service.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../buttons/primary_button.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
+
+class EditProfileByCompanyLocation extends EditorFormModel<CompanyOnboarding> {
+  EditProfileByCompanyLocation(
+    TextEditingController cityController,
+    TextEditingController countryController,
+  ) : super(
+          title: TranslationKeys.editLocation,
+          children: (company, formState, setState) => [
+            ProfileEditorFormField(
+              label: TranslationKeys.city,
+              formState: formState,
+              placeholderText: TranslationKeys.city,
+              height: MinMax(50, 50),
+              textController: cityController,
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.city,
+              validator:
+                  ValidationBuilder(requiredMessage: "Please add a valid city.")
+                      .required()
+                      .build(),
+            ),
+            ProfileEditorFormField(
+              label: TranslationKeys.country,
+              formState: formState,
+              placeholderText: TranslationKeys.country,
+              height: MinMax(50, 50),
+              textController: countryController,
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.country,
+              validator: ValidationBuilder(
+                      requiredMessage: "Please add a valid country.")
+                  .required()
+                  .build(),
+            ),
+          ],
+          afterChildren: (company, formState, setState) => [
+            PrimaryButton(
+              title: TranslationKeys.editCurrentLocation,
+              buttonStyle: PrimaryButtonStyle.bordered,
+              onTap: () async {
+                final locationManager = LocationService();
+                final placemark = await locationManager.getLocation();
+                setState(() {
+                  if (placemark != null) {
+                    cityController.text = placemark.locality!;
+                    countryController.text = placemark.country!;
+                  }
+                });
+              },
+              autoGrow: false,
+              autoExpand: true,
+              expandType: ExpandButtonType.horizontal,
+              size: PrimaryButtonSize.normal,
+              borderRadius: 8,
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      city: cityController.text,
+                      country: countryController.text,
+                    ),
+                  ),
+                );
+          },
+          validated: () =>
+              cityController.text.isNotEmpty &&
+              countryController.text.isNotEmpty,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_username.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_username.dart
new file mode 100644
index 0000000..92afb81
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_username.dart
@@ -0,0 +1,45 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:form_validator/form_validator.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
+
+class EditProfileByCompanyUsername extends EditorFormModel<CompanyOnboarding> {
+  EditProfileByCompanyUsername(
+    TextEditingController usernameController,
+  ) : super(
+          title: TranslationKeys.editUsername,
+          children: (company, formState, setState) => [
+            ProfileEditorFormField(
+              label: TranslationKeys.username,
+              formState: formState,
+              placeholderText: TranslationKeys.username,
+              height: MinMax(50, 50),
+              textController: usernameController,
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.userName,
+              validator: ValidationBuilder(
+                      requiredMessage: "Please add a valid user name.")
+                  .required()
+                  .build(),
+              caption:
+                  "You can only change your username once in every 14 days.",
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      userName: usernameController.text,
+                    ),
+                  ),
+                );
+          },
+          validated: () => usernameController.text.isNotEmpty,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_website.dart b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_website.dart
new file mode 100644
index 0000000..6225c36
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_website.dart
@@ -0,0 +1,47 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:form_validator/form_validator.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+
+
+import '../../../../../bloc/dashboard/profile/company/company_editor_bloc.dart';
+import '../../../../../bloc/dashboard/profile/company/company_editor_event.dart';
+import '../../../../chat/chat_responder.dart';
+import '../../form/profile_editor_form.dart';
+import '../../form/profile_editor_form_field.dart';
+
+class EditCompanyProfileWebsite
+    extends EditorFormModel<CompanyOnboarding> {
+  EditCompanyProfileWebsite(
+    TextEditingController websiteController,
+  ) : super(
+          title: TranslationKeys.editWebsite,
+          children: (company, formState, setState) => [
+            ProfileEditorFormField(
+              label: TranslationKeys.yourWebsite,
+              formState: formState,
+              placeholderText: TranslationKeys.yourWebsite,
+              height: MinMax(50, 50),
+              textController: websiteController,
+              textCapitalization: TextCapitalization.sentences,
+              value: company?.website,
+              validator: ValidationBuilder(
+                      requiredMessage:
+                          "Invalid URL. Please provide a valid url.")
+                  .required()
+                  .build(),
+            ),
+          ],
+          onComplete: (companyProfile, context) async {
+            context.read<CompanyEditorBloc>().add(
+                  UpdateCompanyEvent(
+                    companyProfile: companyProfile!.copyWith(
+                      website: websiteController.text,
+                    ),
+                  ),
+                );
+          },
+          validated: () => websiteController.text.isNotEmpty,
+        );
+}
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/candidate_career_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_career_section.dart
similarity index 81%
rename from lib/presentation/widgets/profile/edit_profile/sections/candidate_career_section.dart
rename to lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_career_section.dart
index 9441bc9..6a7fb14 100644
--- a/lib/presentation/widgets/profile/edit_profile/sections/candidate_career_section.dart
+++ b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_career_section.dart
@@ -4,13 +4,13 @@ import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candidate/candidate_editor_state.dart';
 
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../flows/edit_profile_by_candidate_hourly_rate.dart';
-import '../flows/edit_profile_by_candidate_job_duration.dart';
-import '../flows/edit_profile_by_candidate_job_flexibility.dart';
-import '../sub_section/edit_profile_list_section.dart';
-import '../sub_section/edit_profile_navigate_tile.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../flows/candidate/edit_profile_by_candidate_hourly_rate.dart';
+import '../../flows/candidate/edit_profile_by_candidate_job_duration.dart';
+import '../../flows/candidate/edit_profile_by_candidate_job_flexibility.dart';
+import '../../sub_section/edit_profile_list_section.dart';
+import '../../sub_section/edit_profile_navigate_tile.dart';
 
 class CandidateCareerSection extends StatelessWidget {
  // final String website;
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/candidate_education_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_education_section.dart
similarity index 86%
rename from lib/presentation/widgets/profile/edit_profile/sections/candidate_education_section.dart
rename to lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_education_section.dart
index 8c80801..c1c6369 100644
--- a/lib/presentation/widgets/profile/edit_profile/sections/candidate_education_section.dart
+++ b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_education_section.dart
@@ -1,8 +1,8 @@
 import 'package:highlite_flutter_mvp/data/models/apis/dashboard/cadidate/upload/education/candidate_education.dart';
 
-import '../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
-import '../../../utils/string.dart';
-import '../sub_section/edit_profile_details_section_container.dart';
+import '../../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
+import '../../../../utils/string.dart';
+import '../../sub_section/edit_profile_details_section_container.dart';
 import 'package:flutter/material.dart';
 class EducationDetailsSection extends StatelessWidget {
   final List<CandidateEducation> candidateEducation;
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/candidate_employment_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_employment_section.dart
similarity index 88%
rename from lib/presentation/widgets/profile/edit_profile/sections/candidate_employment_section.dart
rename to lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_employment_section.dart
index e676f48..9308fad 100644
--- a/lib/presentation/widgets/profile/edit_profile/sections/candidate_employment_section.dart
+++ b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_employment_section.dart
@@ -1,5 +1,5 @@
-import '../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
-import '../sub_section/edit_profile_details_section_container.dart';
+import '../../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
+import '../../sub_section/edit_profile_details_section_container.dart';
 import 'package:flutter/material.dart';
 class EmploymentDetailsSection extends StatelessWidget {
   final List<CandidateEmployment> candidateEmployment;
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/candidate_personal_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_personal_section.dart
similarity index 80%
rename from lib/presentation/widgets/profile/edit_profile/sections/candidate_personal_section.dart
rename to lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_personal_section.dart
index f27d371..711d228 100644
--- a/lib/presentation/widgets/profile/edit_profile/sections/candidate_personal_section.dart
+++ b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_personal_section.dart
@@ -1,19 +1,17 @@
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
-import 'package:highlite_flutter_mvp/data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candidate/candidate_editor_state.dart';
 
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../flows/edit_profile_by_candidate_about.dart';
-import '../flows/edit_profile_by_candidate_location.dart';
-import '../flows/edit_profile_by_candidate_name.dart';
-import '../flows/edit_profile_by_candidate_title.dart';
-import '../flows/edit_profile_by_candidate_username.dart';
-import '../sub_section/edit_profile_list_section.dart';
-import '../sub_section/edit_profile_navigate_tile.dart';
-import 'candidate_employment_section.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../flows/candidate/edit_profile_by_candidate_about.dart';
+import '../../flows/candidate/edit_profile_by_candidate_location.dart';
+import '../../flows/candidate/edit_profile_by_candidate_name.dart';
+import '../../flows/candidate/edit_profile_by_candidate_title.dart';
+import '../../flows/candidate/edit_profile_by_candidate_username.dart';
+import '../../sub_section/edit_profile_list_section.dart';
+import '../../sub_section/edit_profile_navigate_tile.dart';
 
 class CandidatePersonalSection extends StatelessWidget {
   final String fullName;
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/candidate_project_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_project_section.dart
similarity index 89%
rename from lib/presentation/widgets/profile/edit_profile/sections/candidate_project_section.dart
rename to lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_project_section.dart
index 7837043..67ed03a 100644
--- a/lib/presentation/widgets/profile/edit_profile/sections/candidate_project_section.dart
+++ b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_project_section.dart
@@ -1,8 +1,8 @@
 import 'package:highlite_flutter_mvp/data/models/apis/dashboard/cadidate/upload/project/candidate_project.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/string.dart';
 
-import '../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
-import '../sub_section/edit_profile_details_section_container.dart';
+import '../../../../../../data/models/apis/dashboard/cadidate/upload/employment/candidate_employment.dart';
+import '../../sub_section/edit_profile_details_section_container.dart';
 import 'package:flutter/material.dart';
 class CandidateProjectSection extends StatelessWidget {
   final List<CandidateProject> candidateProject;
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/candidate_skills_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_skills_section.dart
similarity index 74%
rename from lib/presentation/widgets/profile/edit_profile/sections/candidate_skills_section.dart
rename to lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_skills_section.dart
index b07c197..e19980b 100644
--- a/lib/presentation/widgets/profile/edit_profile/sections/candidate_skills_section.dart
+++ b/lib/presentation/widgets/profile/edit_profile/sections/candidate/candidate_skills_section.dart
@@ -3,12 +3,12 @@ import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candidate/candidate_editor_bloc.dart';
 import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/candidate/candidate_editor_state.dart';
 
-import '../../../../../core/resources/l10n/translation_key.dart';
-import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../flows/edit_profile_by_candidate_skills.dart';
-import '../flows/edit_profile_by_candidate_tools.dart';
-import '../sub_section/edit_profile_list_section.dart';
-import '../sub_section/edit_profile_navigate_tile.dart';
+import '../../../../../../core/resources/l10n/translation_key.dart';
+import '../../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
+import '../../flows/candidate/edit_profile_by_candidate_skills.dart';
+import '../../flows/candidate/edit_profile_by_candidate_tools.dart';
+import '../../sub_section/edit_profile_list_section.dart';
+import '../../sub_section/edit_profile_navigate_tile.dart';
 
 class CandidateSkillsSection extends StatelessWidget {
   const CandidateSkillsSection({super.key});
diff --git a/lib/presentation/widgets/profile/edit_profile/sections/company/company_info_section.dart b/lib/presentation/widgets/profile/edit_profile/sections/company/company_info_section.dart
new file mode 100644
index 0000000..0200288
--- /dev/null
+++ b/lib/presentation/widgets/profile/edit_profile/sections/company/company_info_section.dart
@@ -0,0 +1,107 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:highlite_flutter_mvp/core/resources/l10n/translation_key.dart';
+import 'package:highlite_flutter_mvp/data/models/apis/onboarding/company/company_onboarding.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_bloc.dart';
+import 'package:highlite_flutter_mvp/presentation/bloc/dashboard/profile/company/company_editor_state.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_benefits.dart';
+import 'package:highlite_flutter_mvp/presentation/widgets/profile/edit_profile/flows/company/edit_company_profile_companySize.dart';
+
+import '../../flows/company/edit_company_profile_about.dart';
+import '../../flows/company/edit_company_profile_companyname.dart';
+import '../../flows/company/edit_company_profile_location.dart';
+import '../../flows/company/edit_company_profile_username.dart';
+import '../../flows/company/edit_company_profile_website.dart';
+import '../../sub_section/edit_profile_list_section.dart';
+import '../../sub_section/edit_profile_navigate_tile.dart';
+
+class CompanyInfoSection extends StatelessWidget {
+  final String username;
+  final String companyName;
+  final String industry;
+  final String companySize  ;
+  final String website;
+  final String location;
+  final String aboutCompany;
+  final String? companyLogo;
+  final List<String> benefits ;
+
+  const CompanyInfoSection({
+    super.key,
+    required this.username,
+    required this.companyName,
+    required this.industry,
+    required this.companySize ,
+    required this.website,
+    required this.location,
+    required this.aboutCompany,
+    this.companyLogo,
+    required this.benefits,
+  });
+
+  @override
+  Widget build(BuildContext context) {
+    return BlocBuilder<CompanyEditorBloc, CompanyEditorState>(
+      builder: (ctx, state) => EditProfileListSection(
+        navigations: [
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.username,
+            value: username,
+            data: state.companyProfile,
+            form: EditProfileByCompanyUsername(
+              TextEditingController(text: ""),
+            ),
+          ),
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.companyName,
+            value: companyName,
+            data: state.companyProfile,
+            form: EditCompanyProfileCompanyName(
+              TextEditingController(text: ""),
+            ),
+          ),
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.companySize,
+            value: companySize,
+            data: state.companyProfile,
+            form: EditCompanyProfileCompanySize(
+              TextEditingController(text: ""),
+            ),
+          ),
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.location,
+            value: location,
+            data: state.companyProfile,
+            form: EditProfileByCompanyLocation(
+              TextEditingController(text: ""),
+              TextEditingController(text: ""),
+            ),
+          ),
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.about,
+            value: aboutCompany,
+            data: state.companyProfile,
+            form: EditCompanyProfileAbout(
+              TextEditingController(text: ""),
+            ),
+          ),
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.website,
+            value: website,
+            data: state.companyProfile,
+            form: EditCompanyProfileWebsite(
+              TextEditingController(text: ""),
+            ),
+          ),
+          NavigatedEditProfileForm<CompanyOnboarding>(
+            title: TranslationKeys.editCompanyBenefits,
+            data: state.companyProfile,
+            bordered: false,
+            form: EditCompanyProfileBenefits(
+                companyBenefits: state.companyProfile.benefits),
+          ),
+        ],
+      ),
+    );
+  }
+}
diff --git a/lib/presentation/widgets/profile/sections/candidate/candidate_tab_section.dart b/lib/presentation/widgets/profile/sections/candidate/candidate_tab_section.dart
index 33723bb..e10acf7 100644
--- a/lib/presentation/widgets/profile/sections/candidate/candidate_tab_section.dart
+++ b/lib/presentation/widgets/profile/sections/candidate/candidate_tab_section.dart
@@ -1,32 +1,26 @@
 import 'package:flutter/material.dart';
-import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:highlite_flutter_mvp/core/resources/asset_constants.dart';
 import 'package:highlite_flutter_mvp/core/resources/color_constants.dart';
-import 'package:highlite_flutter_mvp/data/models/apis/dashboard/cadidate/home/candidate_feed.dart';
-import 'package:highlite_flutter_mvp/presentation/bloc/bookmark/bookmark_bloc.dart';
-import 'package:highlite_flutter_mvp/presentation/bloc/bookmark/bookmark_event.dart';
-import 'package:highlite_flutter_mvp/presentation/bloc/bookmark/bookmark_state.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/bookmark/bookmark_page.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/svg/svg_asset.dart';
 
 import '../../../../../data/models/apis/dashboard/cadidate/upload/video/candidate_video_feed.dart';
-import '../../../../../data/models/apis/dashboard/company/upload/company_job_post.dart';
 import '../../../../../data/models/apis/onboarding/bookmark/response/bookmark_collection.dart';
-import '../../../../../data/models/apis/onboarding/bookmark/response/bookmark_infos.dart';
 import '../../../../../data/models/apis/onboarding/candidate/candidate_onboarding.dart';
-import '../../../../../data/models/apis/onboarding/company/company_onboarding.dart';
 import '../../tabs/self_video/profile_video_tab.dart';
 
 class CandidateTabSection extends StatefulWidget {
-  final List<CandidateVideoFeed> candidateFeed ;
-  final CandidateOnBoarding candidateOnBoarding ;
-  final  List<BookmarkCollection> bookmarkCollection ;
+  final List<CandidateVideoFeed> candidateFeed;
+
+  final CandidateOnBoarding candidateOnBoarding;
+
+  final List<BookmarkCollection> bookmarkCollection;
 
   const CandidateTabSection({
     super.key,
     required this.candidateFeed,
-    required this.candidateOnBoarding ,
-   required this.bookmarkCollection ,
+    required this.candidateOnBoarding,
+    required this.bookmarkCollection,
   });
 
   @override
@@ -34,8 +28,6 @@ class CandidateTabSection extends StatefulWidget {
 }
 
 class _CandidateTabSectionState extends State<CandidateTabSection> {
-
-
   @override
   Widget build(BuildContext context) {
     return Padding(
@@ -72,12 +64,18 @@ class _CandidateTabSectionState extends State<CandidateTabSection> {
               ]),
           Expanded(
             child: TabBarView(children: [
-              ProfileVideoTab(candidateVideoFeed: widget.candidateFeed, candidateOnBoarding: widget.candidateOnBoarding,),
+              ProfileVideoTab(
+                candidateVideoFeed: widget.candidateFeed,
+                candidateOnBoarding: widget.candidateOnBoarding,
+              ),
               BookmarkPage(
                 collections: widget.bookmarkCollection,
               ),
-              ProfileVideoTab(candidateVideoFeed: const [], candidateOnBoarding: widget.candidateOnBoarding,),
-            // ProfileVideoTab(),
+              ProfileVideoTab(
+                candidateVideoFeed: const [],
+                candidateOnBoarding: widget.candidateOnBoarding,
+              ),
+              // ProfileVideoTab(),
             ]),
           )
         ],
diff --git a/lib/presentation/widgets/profile/sections/candidate/public_profile/candidate_resume.dart b/lib/presentation/widgets/profile/sections/candidate/public_profile/candidate_resume.dart
index 2d4d2f7..5dc61fa 100644
--- a/lib/presentation/widgets/profile/sections/candidate/public_profile/candidate_resume.dart
+++ b/lib/presentation/widgets/profile/sections/candidate/public_profile/candidate_resume.dart
@@ -12,9 +12,9 @@ import 'package:highlite_flutter_mvp/presentation/widgets/profile/sections/compa
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/iterable.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/utils/string.dart';
 
-import '../../../edit_profile/sections/candidate_education_section.dart';
-import '../../../edit_profile/sections/candidate_employment_section.dart';
-import '../../../edit_profile/sections/candidate_project_section.dart';
+import '../../../edit_profile/sections/candidate/candidate_education_section.dart';
+import '../../../edit_profile/sections/candidate/candidate_employment_section.dart';
+import '../../../edit_profile/sections/candidate/candidate_project_section.dart';
 import '../../company/sections/company_info_header.dart';
 
 class CandidateResume extends StatelessWidget {
diff --git a/lib/presentation/widgets/profile/sections/company/sections/company_tab_section.dart b/lib/presentation/widgets/profile/sections/company/sections/company_tab_section.dart
index 2c9cd11..fd13a1f 100644
--- a/lib/presentation/widgets/profile/sections/company/sections/company_tab_section.dart
+++ b/lib/presentation/widgets/profile/sections/company/sections/company_tab_section.dart
@@ -1,10 +1,11 @@
 import 'package:flutter/material.dart';
 import 'package:highlite_flutter_mvp/presentation/widgets/profile/sections/company/sections/company_profile_video_tab.dart';
+import '../../../../../../core/resources/asset_constants.dart';
+import '../../../../../../core/resources/color_constants.dart';
+import '../../../../svg/svg_asset.dart';
 import '../../../tabs/self_video/profile_video_tab.dart';
 
-
 class CompanyTabSection extends StatefulWidget {
-
   const CompanyTabSection({super.key});
 
   @override
@@ -12,20 +13,49 @@ class CompanyTabSection extends StatefulWidget {
 }
 
 class _CompanyTabSectionState extends State<CompanyTabSection> {
-
-
   @override
   Widget build(BuildContext context) {
-    return const Padding(
-      padding:  EdgeInsets.all(16.0),
+    return Padding(
+      padding: const EdgeInsets.all(16.0),
       child: Column(
         mainAxisAlignment: MainAxisAlignment.start,
         crossAxisAlignment: CrossAxisAlignment.start,
         children: [
-          Expanded(
-            child:CompanyProfileVideTab(),
-
-            ),
+          TabBar(
+              indicatorSize: TabBarIndicatorSize.tab,
+              indicatorColor: ColorConstant.shade100,
+              indicator: UnderlineTabIndicator(
+                  borderSide:
+                      BorderSide(width: 1, color: ColorConstant.shade100)),
+              tabs: [
+                Tab(
+                    icon: SvgAsset(
+                  asset: AssetConstant.dotIcon,
+                  color: ColorConstant.shade100,
+                  size: 24,
+                )),
+                Tab(
+                    icon: SvgAsset(
+                  asset: AssetConstant.bookmarkIcon,
+                  color: ColorConstant.shade100,
+                  size: 24,
+                )),
+                Tab(
+                    icon: SvgAsset(
+                  asset: AssetConstant.likOutlinedIcon,
+                  color: ColorConstant.shade100,
+                  size: 24,
+                )),
+              ]),
+          const Expanded(
+            child: TabBarView(children: [
+
+              CompanyProfileVideTab(),
+              CompanyProfileVideTab(),
+              CompanyProfileVideTab()
+
+            ]),
+          ),
         ],
       ),
     );
